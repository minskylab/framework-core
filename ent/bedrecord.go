// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/bedrecord"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// BedRecord is the model entity for the BedRecord schema.
type BedRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BusyCovidBeds holds the value of the "busyCovidBeds" field.
	BusyCovidBeds int `json:"busyCovidBeds,omitempty"`
	// AvailableCovidBeds holds the value of the "availableCovidBeds" field.
	AvailableCovidBeds int `json:"availableCovidBeds,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BedRecordQuery when eager-loading is set.
	Edges BedRecordEdges `json:"edges"`
}

// BedRecordEdges holds the relations/edges for other nodes in the graph.
type BedRecordEdges struct {
	// Organization holds the value of the organization edge.
	Organization []*Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading.
func (e BedRecordEdges) OrganizationOrErr() ([]*Organization, error) {
	if e.loadedTypes[0] {
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BedRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bedrecord.FieldID, bedrecord.FieldBusyCovidBeds, bedrecord.FieldAvailableCovidBeds:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BedRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BedRecord fields.
func (br *BedRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bedrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			br.ID = int(value.Int64)
		case bedrecord.FieldBusyCovidBeds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field busyCovidBeds", values[i])
			} else if value.Valid {
				br.BusyCovidBeds = int(value.Int64)
			}
		case bedrecord.FieldAvailableCovidBeds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field availableCovidBeds", values[i])
			} else if value.Valid {
				br.AvailableCovidBeds = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrganization queries the "organization" edge of the BedRecord entity.
func (br *BedRecord) QueryOrganization() *OrganizationQuery {
	return (&BedRecordClient{config: br.config}).QueryOrganization(br)
}

// Update returns a builder for updating this BedRecord.
// Note that you need to call BedRecord.Unwrap() before calling this method if this BedRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (br *BedRecord) Update() *BedRecordUpdateOne {
	return (&BedRecordClient{config: br.config}).UpdateOne(br)
}

// Unwrap unwraps the BedRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (br *BedRecord) Unwrap() *BedRecord {
	tx, ok := br.config.driver.(*txDriver)
	if !ok {
		panic("ent: BedRecord is not a transactional entity")
	}
	br.config.driver = tx.drv
	return br
}

// String implements the fmt.Stringer.
func (br *BedRecord) String() string {
	var builder strings.Builder
	builder.WriteString("BedRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", br.ID))
	builder.WriteString(", busyCovidBeds=")
	builder.WriteString(fmt.Sprintf("%v", br.BusyCovidBeds))
	builder.WriteString(", availableCovidBeds=")
	builder.WriteString(fmt.Sprintf("%v", br.AvailableCovidBeds))
	builder.WriteByte(')')
	return builder.String()
}

// BedRecords is a parsable slice of BedRecord.
type BedRecords []*BedRecord

func (br BedRecords) config(cfg config) {
	for _i := range br {
		br[_i].config = cfg
	}
}
