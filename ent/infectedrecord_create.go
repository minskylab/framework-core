// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opencensus/core/ent/infectedrecord"
	"opencensus/core/ent/place"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InfectedRecordCreate is the builder for creating a InfectedRecord entity.
type InfectedRecordCreate struct {
	config
	mutation *InfectedRecordMutation
	hooks    []Hook
}

// SetReportedDate sets the "reportedDate" field.
func (irc *InfectedRecordCreate) SetReportedDate(t time.Time) *InfectedRecordCreate {
	irc.mutation.SetReportedDate(t)
	return irc
}

// SetCollectedDate sets the "collectedDate" field.
func (irc *InfectedRecordCreate) SetCollectedDate(t time.Time) *InfectedRecordCreate {
	irc.mutation.SetCollectedDate(t)
	return irc
}

// SetPcrTotalTests sets the "pcrTotalTests" field.
func (irc *InfectedRecordCreate) SetPcrTotalTests(i int) *InfectedRecordCreate {
	irc.mutation.SetPcrTotalTests(i)
	return irc
}

// SetPrTotalTests sets the "prTotalTests" field.
func (irc *InfectedRecordCreate) SetPrTotalTests(i int) *InfectedRecordCreate {
	irc.mutation.SetPrTotalTests(i)
	return irc
}

// SetAgTotalTests sets the "agTotalTests" field.
func (irc *InfectedRecordCreate) SetAgTotalTests(i int) *InfectedRecordCreate {
	irc.mutation.SetAgTotalTests(i)
	return irc
}

// SetPcrPositiveTests sets the "pcrPositiveTests" field.
func (irc *InfectedRecordCreate) SetPcrPositiveTests(i int) *InfectedRecordCreate {
	irc.mutation.SetPcrPositiveTests(i)
	return irc
}

// SetPrPositiveTests sets the "prPositiveTests" field.
func (irc *InfectedRecordCreate) SetPrPositiveTests(i int) *InfectedRecordCreate {
	irc.mutation.SetPrPositiveTests(i)
	return irc
}

// SetAgPositiveTests sets the "agPositiveTests" field.
func (irc *InfectedRecordCreate) SetAgPositiveTests(i int) *InfectedRecordCreate {
	irc.mutation.SetAgPositiveTests(i)
	return irc
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (irc *InfectedRecordCreate) AddPlaceIDs(ids ...int) *InfectedRecordCreate {
	irc.mutation.AddPlaceIDs(ids...)
	return irc
}

// AddPlaces adds the "places" edges to the Place entity.
func (irc *InfectedRecordCreate) AddPlaces(p ...*Place) *InfectedRecordCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return irc.AddPlaceIDs(ids...)
}

// Mutation returns the InfectedRecordMutation object of the builder.
func (irc *InfectedRecordCreate) Mutation() *InfectedRecordMutation {
	return irc.mutation
}

// Save creates the InfectedRecord in the database.
func (irc *InfectedRecordCreate) Save(ctx context.Context) (*InfectedRecord, error) {
	var (
		err  error
		node *InfectedRecord
	)
	if len(irc.hooks) == 0 {
		if err = irc.check(); err != nil {
			return nil, err
		}
		node, err = irc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InfectedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = irc.check(); err != nil {
				return nil, err
			}
			irc.mutation = mutation
			node, err = irc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(irc.hooks) - 1; i >= 0; i-- {
			mut = irc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, irc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (irc *InfectedRecordCreate) SaveX(ctx context.Context) *InfectedRecord {
	v, err := irc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (irc *InfectedRecordCreate) check() error {
	if _, ok := irc.mutation.ReportedDate(); !ok {
		return &ValidationError{Name: "reportedDate", err: errors.New("ent: missing required field \"reportedDate\"")}
	}
	if _, ok := irc.mutation.CollectedDate(); !ok {
		return &ValidationError{Name: "collectedDate", err: errors.New("ent: missing required field \"collectedDate\"")}
	}
	if _, ok := irc.mutation.PcrTotalTests(); !ok {
		return &ValidationError{Name: "pcrTotalTests", err: errors.New("ent: missing required field \"pcrTotalTests\"")}
	}
	if _, ok := irc.mutation.PrTotalTests(); !ok {
		return &ValidationError{Name: "prTotalTests", err: errors.New("ent: missing required field \"prTotalTests\"")}
	}
	if _, ok := irc.mutation.AgTotalTests(); !ok {
		return &ValidationError{Name: "agTotalTests", err: errors.New("ent: missing required field \"agTotalTests\"")}
	}
	if _, ok := irc.mutation.PcrPositiveTests(); !ok {
		return &ValidationError{Name: "pcrPositiveTests", err: errors.New("ent: missing required field \"pcrPositiveTests\"")}
	}
	if _, ok := irc.mutation.PrPositiveTests(); !ok {
		return &ValidationError{Name: "prPositiveTests", err: errors.New("ent: missing required field \"prPositiveTests\"")}
	}
	if _, ok := irc.mutation.AgPositiveTests(); !ok {
		return &ValidationError{Name: "agPositiveTests", err: errors.New("ent: missing required field \"agPositiveTests\"")}
	}
	return nil
}

func (irc *InfectedRecordCreate) sqlSave(ctx context.Context) (*InfectedRecord, error) {
	_node, _spec := irc.createSpec()
	if err := sqlgraph.CreateNode(ctx, irc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (irc *InfectedRecordCreate) createSpec() (*InfectedRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &InfectedRecord{config: irc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: infectedrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: infectedrecord.FieldID,
			},
		}
	)
	if value, ok := irc.mutation.ReportedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: infectedrecord.FieldReportedDate,
		})
		_node.ReportedDate = value
	}
	if value, ok := irc.mutation.CollectedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: infectedrecord.FieldCollectedDate,
		})
		_node.CollectedDate = value
	}
	if value, ok := irc.mutation.PcrTotalTests(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrTotalTests,
		})
		_node.PcrTotalTests = value
	}
	if value, ok := irc.mutation.PrTotalTests(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrTotalTests,
		})
		_node.PrTotalTests = value
	}
	if value, ok := irc.mutation.AgTotalTests(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgTotalTests,
		})
		_node.AgTotalTests = value
	}
	if value, ok := irc.mutation.PcrPositiveTests(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrPositiveTests,
		})
		_node.PcrPositiveTests = value
	}
	if value, ok := irc.mutation.PrPositiveTests(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrPositiveTests,
		})
		_node.PrPositiveTests = value
	}
	if value, ok := irc.mutation.AgPositiveTests(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgPositiveTests,
		})
		_node.AgPositiveTests = value
	}
	if nodes := irc.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InfectedRecordCreateBulk is the builder for creating many InfectedRecord entities in bulk.
type InfectedRecordCreateBulk struct {
	config
	builders []*InfectedRecordCreate
}

// Save creates the InfectedRecord entities in the database.
func (ircb *InfectedRecordCreateBulk) Save(ctx context.Context) ([]*InfectedRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ircb.builders))
	nodes := make([]*InfectedRecord, len(ircb.builders))
	mutators := make([]Mutator, len(ircb.builders))
	for i := range ircb.builders {
		func(i int, root context.Context) {
			builder := ircb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InfectedRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ircb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ircb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ircb *InfectedRecordCreateBulk) SaveX(ctx context.Context) []*InfectedRecord {
	v, err := ircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
