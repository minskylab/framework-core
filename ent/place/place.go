// Code generated by entc, DO NOT EDIT.

package place

const (
	// Label holds the string label denoting the place type in the database.
	Label = "place"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPolitic holds the string denoting the politic field in the database.
	FieldPolitic = "politic"
	// FieldUbigeo holds the string denoting the ubigeo field in the database.
	FieldUbigeo = "ubigeo"
	// FieldCovidZone holds the string denoting the covidzone field in the database.
	FieldCovidZone = "covid_zone"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLon holds the string denoting the lon field in the database.
	FieldLon = "lon"

	// EdgeOxygenrecords holds the string denoting the oxygenrecords edge name in mutations.
	EdgeOxygenrecords = "oxygenrecords"
	// EdgeBedRecords holds the string denoting the bedrecords edge name in mutations.
	EdgeBedRecords = "bedRecords"
	// EdgeDeathRecords holds the string denoting the deathrecords edge name in mutations.
	EdgeDeathRecords = "deathRecords"
	// EdgeInfectedRecords holds the string denoting the infectedrecords edge name in mutations.
	EdgeInfectedRecords = "infectedRecords"
	// EdgeRegion holds the string denoting the region edge name in mutations.
	EdgeRegion = "region"
	// EdgeProvince holds the string denoting the province edge name in mutations.
	EdgeProvince = "province"
	// EdgeDistrict holds the string denoting the district edge name in mutations.
	EdgeDistrict = "district"

	// Table holds the table name of the place in the database.
	Table = "places"
	// OxygenrecordsTable is the table the holds the oxygenrecords relation/edge. The primary key declared below.
	OxygenrecordsTable = "oxygen_record_places"
	// OxygenrecordsInverseTable is the table name for the OxygenRecord entity.
	// It exists in this package in order to avoid circular dependency with the "oxygenrecord" package.
	OxygenrecordsInverseTable = "oxygen_records"
	// BedRecordsTable is the table the holds the bedRecords relation/edge. The primary key declared below.
	BedRecordsTable = "bed_record_places"
	// BedRecordsInverseTable is the table name for the BedRecord entity.
	// It exists in this package in order to avoid circular dependency with the "bedrecord" package.
	BedRecordsInverseTable = "bed_records"
	// DeathRecordsTable is the table the holds the deathRecords relation/edge. The primary key declared below.
	DeathRecordsTable = "death_record_places"
	// DeathRecordsInverseTable is the table name for the DeathRecord entity.
	// It exists in this package in order to avoid circular dependency with the "deathrecord" package.
	DeathRecordsInverseTable = "death_records"
	// InfectedRecordsTable is the table the holds the infectedRecords relation/edge. The primary key declared below.
	InfectedRecordsTable = "infected_record_places"
	// InfectedRecordsInverseTable is the table name for the InfectedRecord entity.
	// It exists in this package in order to avoid circular dependency with the "infectedrecord" package.
	InfectedRecordsInverseTable = "infected_records"
	// RegionTable is the table the holds the region relation/edge.
	RegionTable = "places"
	// RegionInverseTable is the table name for the Region entity.
	// It exists in this package in order to avoid circular dependency with the "region" package.
	RegionInverseTable = "regions"
	// RegionColumn is the table column denoting the region relation/edge.
	RegionColumn = "place_region"
	// ProvinceTable is the table the holds the province relation/edge.
	ProvinceTable = "places"
	// ProvinceInverseTable is the table name for the Province entity.
	// It exists in this package in order to avoid circular dependency with the "province" package.
	ProvinceInverseTable = "provinces"
	// ProvinceColumn is the table column denoting the province relation/edge.
	ProvinceColumn = "place_province"
	// DistrictTable is the table the holds the district relation/edge.
	DistrictTable = "places"
	// DistrictInverseTable is the table name for the District entity.
	// It exists in this package in order to avoid circular dependency with the "district" package.
	DistrictInverseTable = "districts"
	// DistrictColumn is the table column denoting the district relation/edge.
	DistrictColumn = "place_district"
)

// Columns holds all SQL columns for place fields.
var Columns = []string{
	FieldID,
	FieldKind,
	FieldName,
	FieldPolitic,
	FieldUbigeo,
	FieldCovidZone,
	FieldLat,
	FieldLon,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Place type.
var ForeignKeys = []string{
	"place_region",
	"place_province",
	"place_district",
}

var (
	// OxygenrecordsPrimaryKey and OxygenrecordsColumn2 are the table columns denoting the
	// primary key for the oxygenrecords relation (M2M).
	OxygenrecordsPrimaryKey = []string{"oxygen_record_id", "place_id"}
	// BedRecordsPrimaryKey and BedRecordsColumn2 are the table columns denoting the
	// primary key for the bedRecords relation (M2M).
	BedRecordsPrimaryKey = []string{"bed_record_id", "place_id"}
	// DeathRecordsPrimaryKey and DeathRecordsColumn2 are the table columns denoting the
	// primary key for the deathRecords relation (M2M).
	DeathRecordsPrimaryKey = []string{"death_record_id", "place_id"}
	// InfectedRecordsPrimaryKey and InfectedRecordsColumn2 are the table columns denoting the
	// primary key for the infectedRecords relation (M2M).
	InfectedRecordsPrimaryKey = []string{"infected_record_id", "place_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
