// Code generated by entc, DO NOT EDIT.

package occurency

import (
	"opencensus/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// ReportedRecord applies equality check predicate on the "reportedRecord" field. It's identical to ReportedRecordEQ.
func ReportedRecord(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportedRecord), v))
	})
}

// ResultDate applies equality check predicate on the "resultDate" field. It's identical to ResultDateEQ.
func ResultDate(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultDate), v))
	})
}

// BiologicalSex applies equality check predicate on the "biologicalSex" field. It's identical to BiologicalSexEQ.
func BiologicalSex(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBiologicalSex), v))
	})
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// ReportedRecordEQ applies the EQ predicate on the "reportedRecord" field.
func ReportedRecordEQ(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportedRecord), v))
	})
}

// ReportedRecordNEQ applies the NEQ predicate on the "reportedRecord" field.
func ReportedRecordNEQ(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportedRecord), v))
	})
}

// ReportedRecordIn applies the In predicate on the "reportedRecord" field.
func ReportedRecordIn(vs ...time.Time) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportedRecord), v...))
	})
}

// ReportedRecordNotIn applies the NotIn predicate on the "reportedRecord" field.
func ReportedRecordNotIn(vs ...time.Time) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportedRecord), v...))
	})
}

// ReportedRecordGT applies the GT predicate on the "reportedRecord" field.
func ReportedRecordGT(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportedRecord), v))
	})
}

// ReportedRecordGTE applies the GTE predicate on the "reportedRecord" field.
func ReportedRecordGTE(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportedRecord), v))
	})
}

// ReportedRecordLT applies the LT predicate on the "reportedRecord" field.
func ReportedRecordLT(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportedRecord), v))
	})
}

// ReportedRecordLTE applies the LTE predicate on the "reportedRecord" field.
func ReportedRecordLTE(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportedRecord), v))
	})
}

// ResultDateEQ applies the EQ predicate on the "resultDate" field.
func ResultDateEQ(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultDate), v))
	})
}

// ResultDateNEQ applies the NEQ predicate on the "resultDate" field.
func ResultDateNEQ(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultDate), v))
	})
}

// ResultDateIn applies the In predicate on the "resultDate" field.
func ResultDateIn(vs ...time.Time) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResultDate), v...))
	})
}

// ResultDateNotIn applies the NotIn predicate on the "resultDate" field.
func ResultDateNotIn(vs ...time.Time) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResultDate), v...))
	})
}

// ResultDateGT applies the GT predicate on the "resultDate" field.
func ResultDateGT(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultDate), v))
	})
}

// ResultDateGTE applies the GTE predicate on the "resultDate" field.
func ResultDateGTE(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultDate), v))
	})
}

// ResultDateLT applies the LT predicate on the "resultDate" field.
func ResultDateLT(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultDate), v))
	})
}

// ResultDateLTE applies the LTE predicate on the "resultDate" field.
func ResultDateLTE(v time.Time) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultDate), v))
	})
}

// BiologicalSexEQ applies the EQ predicate on the "biologicalSex" field.
func BiologicalSexEQ(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexNEQ applies the NEQ predicate on the "biologicalSex" field.
func BiologicalSexNEQ(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexIn applies the In predicate on the "biologicalSex" field.
func BiologicalSexIn(vs ...string) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBiologicalSex), v...))
	})
}

// BiologicalSexNotIn applies the NotIn predicate on the "biologicalSex" field.
func BiologicalSexNotIn(vs ...string) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBiologicalSex), v...))
	})
}

// BiologicalSexGT applies the GT predicate on the "biologicalSex" field.
func BiologicalSexGT(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexGTE applies the GTE predicate on the "biologicalSex" field.
func BiologicalSexGTE(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexLT applies the LT predicate on the "biologicalSex" field.
func BiologicalSexLT(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexLTE applies the LTE predicate on the "biologicalSex" field.
func BiologicalSexLTE(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexContains applies the Contains predicate on the "biologicalSex" field.
func BiologicalSexContains(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexHasPrefix applies the HasPrefix predicate on the "biologicalSex" field.
func BiologicalSexHasPrefix(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexHasSuffix applies the HasSuffix predicate on the "biologicalSex" field.
func BiologicalSexHasSuffix(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexEqualFold applies the EqualFold predicate on the "biologicalSex" field.
func BiologicalSexEqualFold(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBiologicalSex), v))
	})
}

// BiologicalSexContainsFold applies the ContainsFold predicate on the "biologicalSex" field.
func BiologicalSexContainsFold(v string) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBiologicalSex), v))
	})
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Occurency {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Occurency(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// HasRegion applies the HasEdge predicate on the "region" edge.
func HasRegion() predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RegionTable, RegionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegionWith applies the HasEdge predicate on the "region" edge with a given conditions (other predicates).
func HasRegionWith(preds ...predicate.Region) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RegionTable, RegionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvince applies the HasEdge predicate on the "province" edge.
func HasProvince() predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvinceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvinceTable, ProvinceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvinceWith applies the HasEdge predicate on the "province" edge with a given conditions (other predicates).
func HasProvinceWith(preds ...predicate.Province) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvinceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvinceTable, ProvinceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDistrict applies the HasEdge predicate on the "district" edge.
func HasDistrict() predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistrictTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DistrictTable, DistrictColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistrictWith applies the HasEdge predicate on the "district" edge with a given conditions (other predicates).
func HasDistrictWith(preds ...predicate.District) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistrictInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DistrictTable, DistrictColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Occurency) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Occurency) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Occurency) predicate.Occurency {
	return predicate.Occurency(func(s *sql.Selector) {
		p(s.Not())
	})
}
