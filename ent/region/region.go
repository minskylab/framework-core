// Code generated by entc, DO NOT EDIT.

package region

const (
	// Label holds the string label denoting the region type in the database.
	Label = "region"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"

	// EdgePlaces holds the string denoting the places edge name in mutations.
	EdgePlaces = "places"
	// EdgeProvinces holds the string denoting the provinces edge name in mutations.
	EdgeProvinces = "provinces"

	// Table holds the table name of the region in the database.
	Table = "regions"
	// PlacesTable is the table the holds the places relation/edge. The primary key declared below.
	PlacesTable = "place_regions"
	// PlacesInverseTable is the table name for the Place entity.
	// It exists in this package in order to avoid circular dependency with the "place" package.
	PlacesInverseTable = "places"
	// ProvincesTable is the table the holds the provinces relation/edge. The primary key declared below.
	ProvincesTable = "region_provinces"
	// ProvincesInverseTable is the table name for the Province entity.
	// It exists in this package in order to avoid circular dependency with the "province" package.
	ProvincesInverseTable = "provinces"
)

// Columns holds all SQL columns for region fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// PlacesPrimaryKey and PlacesColumn2 are the table columns denoting the
	// primary key for the places relation (M2M).
	PlacesPrimaryKey = []string{"place_id", "region_id"}
	// ProvincesPrimaryKey and ProvincesColumn2 are the table columns denoting the
	// primary key for the provinces relation (M2M).
	ProvincesPrimaryKey = []string{"region_id", "province_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
