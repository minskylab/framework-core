// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"opencensus/core/ent/infectedrecord"
	"opencensus/core/ent/place"
	"opencensus/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InfectedRecordUpdate is the builder for updating InfectedRecord entities.
type InfectedRecordUpdate struct {
	config
	hooks    []Hook
	mutation *InfectedRecordMutation
}

// Where adds a new predicate for the InfectedRecordUpdate builder.
func (iru *InfectedRecordUpdate) Where(ps ...predicate.InfectedRecord) *InfectedRecordUpdate {
	iru.mutation.predicates = append(iru.mutation.predicates, ps...)
	return iru
}

// SetReportedDate sets the "reportedDate" field.
func (iru *InfectedRecordUpdate) SetReportedDate(t time.Time) *InfectedRecordUpdate {
	iru.mutation.SetReportedDate(t)
	return iru
}

// SetCollectedDate sets the "collectedDate" field.
func (iru *InfectedRecordUpdate) SetCollectedDate(t time.Time) *InfectedRecordUpdate {
	iru.mutation.SetCollectedDate(t)
	return iru
}

// SetPcrTotalTests sets the "pcrTotalTests" field.
func (iru *InfectedRecordUpdate) SetPcrTotalTests(i int) *InfectedRecordUpdate {
	iru.mutation.ResetPcrTotalTests()
	iru.mutation.SetPcrTotalTests(i)
	return iru
}

// AddPcrTotalTests adds i to the "pcrTotalTests" field.
func (iru *InfectedRecordUpdate) AddPcrTotalTests(i int) *InfectedRecordUpdate {
	iru.mutation.AddPcrTotalTests(i)
	return iru
}

// SetPrTotalTests sets the "prTotalTests" field.
func (iru *InfectedRecordUpdate) SetPrTotalTests(i int) *InfectedRecordUpdate {
	iru.mutation.ResetPrTotalTests()
	iru.mutation.SetPrTotalTests(i)
	return iru
}

// AddPrTotalTests adds i to the "prTotalTests" field.
func (iru *InfectedRecordUpdate) AddPrTotalTests(i int) *InfectedRecordUpdate {
	iru.mutation.AddPrTotalTests(i)
	return iru
}

// SetAgTotalTests sets the "agTotalTests" field.
func (iru *InfectedRecordUpdate) SetAgTotalTests(i int) *InfectedRecordUpdate {
	iru.mutation.ResetAgTotalTests()
	iru.mutation.SetAgTotalTests(i)
	return iru
}

// AddAgTotalTests adds i to the "agTotalTests" field.
func (iru *InfectedRecordUpdate) AddAgTotalTests(i int) *InfectedRecordUpdate {
	iru.mutation.AddAgTotalTests(i)
	return iru
}

// SetPcrPositiveTests sets the "pcrPositiveTests" field.
func (iru *InfectedRecordUpdate) SetPcrPositiveTests(i int) *InfectedRecordUpdate {
	iru.mutation.ResetPcrPositiveTests()
	iru.mutation.SetPcrPositiveTests(i)
	return iru
}

// AddPcrPositiveTests adds i to the "pcrPositiveTests" field.
func (iru *InfectedRecordUpdate) AddPcrPositiveTests(i int) *InfectedRecordUpdate {
	iru.mutation.AddPcrPositiveTests(i)
	return iru
}

// SetPrPositiveTests sets the "prPositiveTests" field.
func (iru *InfectedRecordUpdate) SetPrPositiveTests(i int) *InfectedRecordUpdate {
	iru.mutation.ResetPrPositiveTests()
	iru.mutation.SetPrPositiveTests(i)
	return iru
}

// AddPrPositiveTests adds i to the "prPositiveTests" field.
func (iru *InfectedRecordUpdate) AddPrPositiveTests(i int) *InfectedRecordUpdate {
	iru.mutation.AddPrPositiveTests(i)
	return iru
}

// SetAgPositiveTests sets the "agPositiveTests" field.
func (iru *InfectedRecordUpdate) SetAgPositiveTests(i int) *InfectedRecordUpdate {
	iru.mutation.ResetAgPositiveTests()
	iru.mutation.SetAgPositiveTests(i)
	return iru
}

// AddAgPositiveTests adds i to the "agPositiveTests" field.
func (iru *InfectedRecordUpdate) AddAgPositiveTests(i int) *InfectedRecordUpdate {
	iru.mutation.AddAgPositiveTests(i)
	return iru
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (iru *InfectedRecordUpdate) AddPlaceIDs(ids ...int) *InfectedRecordUpdate {
	iru.mutation.AddPlaceIDs(ids...)
	return iru
}

// AddPlaces adds the "places" edges to the Place entity.
func (iru *InfectedRecordUpdate) AddPlaces(p ...*Place) *InfectedRecordUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iru.AddPlaceIDs(ids...)
}

// Mutation returns the InfectedRecordMutation object of the builder.
func (iru *InfectedRecordUpdate) Mutation() *InfectedRecordMutation {
	return iru.mutation
}

// ClearPlaces clears all "places" edges to the Place entity.
func (iru *InfectedRecordUpdate) ClearPlaces() *InfectedRecordUpdate {
	iru.mutation.ClearPlaces()
	return iru
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (iru *InfectedRecordUpdate) RemovePlaceIDs(ids ...int) *InfectedRecordUpdate {
	iru.mutation.RemovePlaceIDs(ids...)
	return iru
}

// RemovePlaces removes "places" edges to Place entities.
func (iru *InfectedRecordUpdate) RemovePlaces(p ...*Place) *InfectedRecordUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iru.RemovePlaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *InfectedRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iru.hooks) == 0 {
		affected, err = iru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InfectedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iru.mutation = mutation
			affected, err = iru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iru.hooks) - 1; i >= 0; i-- {
			mut = iru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iru *InfectedRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *InfectedRecordUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *InfectedRecordUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iru *InfectedRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   infectedrecord.Table,
			Columns: infectedrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: infectedrecord.FieldID,
			},
		},
	}
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.ReportedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: infectedrecord.FieldReportedDate,
		})
	}
	if value, ok := iru.mutation.CollectedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: infectedrecord.FieldCollectedDate,
		})
	}
	if value, ok := iru.mutation.PcrTotalTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrTotalTests,
		})
	}
	if value, ok := iru.mutation.AddedPcrTotalTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrTotalTests,
		})
	}
	if value, ok := iru.mutation.PrTotalTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrTotalTests,
		})
	}
	if value, ok := iru.mutation.AddedPrTotalTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrTotalTests,
		})
	}
	if value, ok := iru.mutation.AgTotalTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgTotalTests,
		})
	}
	if value, ok := iru.mutation.AddedAgTotalTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgTotalTests,
		})
	}
	if value, ok := iru.mutation.PcrPositiveTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrPositiveTests,
		})
	}
	if value, ok := iru.mutation.AddedPcrPositiveTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrPositiveTests,
		})
	}
	if value, ok := iru.mutation.PrPositiveTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrPositiveTests,
		})
	}
	if value, ok := iru.mutation.AddedPrPositiveTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrPositiveTests,
		})
	}
	if value, ok := iru.mutation.AgPositiveTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgPositiveTests,
		})
	}
	if value, ok := iru.mutation.AddedAgPositiveTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgPositiveTests,
		})
	}
	if iru.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !iru.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{infectedrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InfectedRecordUpdateOne is the builder for updating a single InfectedRecord entity.
type InfectedRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *InfectedRecordMutation
}

// SetReportedDate sets the "reportedDate" field.
func (iruo *InfectedRecordUpdateOne) SetReportedDate(t time.Time) *InfectedRecordUpdateOne {
	iruo.mutation.SetReportedDate(t)
	return iruo
}

// SetCollectedDate sets the "collectedDate" field.
func (iruo *InfectedRecordUpdateOne) SetCollectedDate(t time.Time) *InfectedRecordUpdateOne {
	iruo.mutation.SetCollectedDate(t)
	return iruo
}

// SetPcrTotalTests sets the "pcrTotalTests" field.
func (iruo *InfectedRecordUpdateOne) SetPcrTotalTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.ResetPcrTotalTests()
	iruo.mutation.SetPcrTotalTests(i)
	return iruo
}

// AddPcrTotalTests adds i to the "pcrTotalTests" field.
func (iruo *InfectedRecordUpdateOne) AddPcrTotalTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.AddPcrTotalTests(i)
	return iruo
}

// SetPrTotalTests sets the "prTotalTests" field.
func (iruo *InfectedRecordUpdateOne) SetPrTotalTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.ResetPrTotalTests()
	iruo.mutation.SetPrTotalTests(i)
	return iruo
}

// AddPrTotalTests adds i to the "prTotalTests" field.
func (iruo *InfectedRecordUpdateOne) AddPrTotalTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.AddPrTotalTests(i)
	return iruo
}

// SetAgTotalTests sets the "agTotalTests" field.
func (iruo *InfectedRecordUpdateOne) SetAgTotalTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.ResetAgTotalTests()
	iruo.mutation.SetAgTotalTests(i)
	return iruo
}

// AddAgTotalTests adds i to the "agTotalTests" field.
func (iruo *InfectedRecordUpdateOne) AddAgTotalTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.AddAgTotalTests(i)
	return iruo
}

// SetPcrPositiveTests sets the "pcrPositiveTests" field.
func (iruo *InfectedRecordUpdateOne) SetPcrPositiveTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.ResetPcrPositiveTests()
	iruo.mutation.SetPcrPositiveTests(i)
	return iruo
}

// AddPcrPositiveTests adds i to the "pcrPositiveTests" field.
func (iruo *InfectedRecordUpdateOne) AddPcrPositiveTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.AddPcrPositiveTests(i)
	return iruo
}

// SetPrPositiveTests sets the "prPositiveTests" field.
func (iruo *InfectedRecordUpdateOne) SetPrPositiveTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.ResetPrPositiveTests()
	iruo.mutation.SetPrPositiveTests(i)
	return iruo
}

// AddPrPositiveTests adds i to the "prPositiveTests" field.
func (iruo *InfectedRecordUpdateOne) AddPrPositiveTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.AddPrPositiveTests(i)
	return iruo
}

// SetAgPositiveTests sets the "agPositiveTests" field.
func (iruo *InfectedRecordUpdateOne) SetAgPositiveTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.ResetAgPositiveTests()
	iruo.mutation.SetAgPositiveTests(i)
	return iruo
}

// AddAgPositiveTests adds i to the "agPositiveTests" field.
func (iruo *InfectedRecordUpdateOne) AddAgPositiveTests(i int) *InfectedRecordUpdateOne {
	iruo.mutation.AddAgPositiveTests(i)
	return iruo
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (iruo *InfectedRecordUpdateOne) AddPlaceIDs(ids ...int) *InfectedRecordUpdateOne {
	iruo.mutation.AddPlaceIDs(ids...)
	return iruo
}

// AddPlaces adds the "places" edges to the Place entity.
func (iruo *InfectedRecordUpdateOne) AddPlaces(p ...*Place) *InfectedRecordUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iruo.AddPlaceIDs(ids...)
}

// Mutation returns the InfectedRecordMutation object of the builder.
func (iruo *InfectedRecordUpdateOne) Mutation() *InfectedRecordMutation {
	return iruo.mutation
}

// ClearPlaces clears all "places" edges to the Place entity.
func (iruo *InfectedRecordUpdateOne) ClearPlaces() *InfectedRecordUpdateOne {
	iruo.mutation.ClearPlaces()
	return iruo
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (iruo *InfectedRecordUpdateOne) RemovePlaceIDs(ids ...int) *InfectedRecordUpdateOne {
	iruo.mutation.RemovePlaceIDs(ids...)
	return iruo
}

// RemovePlaces removes "places" edges to Place entities.
func (iruo *InfectedRecordUpdateOne) RemovePlaces(p ...*Place) *InfectedRecordUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iruo.RemovePlaceIDs(ids...)
}

// Save executes the query and returns the updated InfectedRecord entity.
func (iruo *InfectedRecordUpdateOne) Save(ctx context.Context) (*InfectedRecord, error) {
	var (
		err  error
		node *InfectedRecord
	)
	if len(iruo.hooks) == 0 {
		node, err = iruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InfectedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iruo.mutation = mutation
			node, err = iruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iruo.hooks) - 1; i >= 0; i-- {
			mut = iruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *InfectedRecordUpdateOne) SaveX(ctx context.Context) *InfectedRecord {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *InfectedRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *InfectedRecordUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iruo *InfectedRecordUpdateOne) sqlSave(ctx context.Context) (_node *InfectedRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   infectedrecord.Table,
			Columns: infectedrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: infectedrecord.FieldID,
			},
		},
	}
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InfectedRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := iruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iruo.mutation.ReportedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: infectedrecord.FieldReportedDate,
		})
	}
	if value, ok := iruo.mutation.CollectedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: infectedrecord.FieldCollectedDate,
		})
	}
	if value, ok := iruo.mutation.PcrTotalTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrTotalTests,
		})
	}
	if value, ok := iruo.mutation.AddedPcrTotalTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrTotalTests,
		})
	}
	if value, ok := iruo.mutation.PrTotalTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrTotalTests,
		})
	}
	if value, ok := iruo.mutation.AddedPrTotalTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrTotalTests,
		})
	}
	if value, ok := iruo.mutation.AgTotalTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgTotalTests,
		})
	}
	if value, ok := iruo.mutation.AddedAgTotalTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgTotalTests,
		})
	}
	if value, ok := iruo.mutation.PcrPositiveTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrPositiveTests,
		})
	}
	if value, ok := iruo.mutation.AddedPcrPositiveTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPcrPositiveTests,
		})
	}
	if value, ok := iruo.mutation.PrPositiveTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrPositiveTests,
		})
	}
	if value, ok := iruo.mutation.AddedPrPositiveTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldPrPositiveTests,
		})
	}
	if value, ok := iruo.mutation.AgPositiveTests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgPositiveTests,
		})
	}
	if value, ok := iruo.mutation.AddedAgPositiveTests(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: infectedrecord.FieldAgPositiveTests,
		})
	}
	if iruo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !iruo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   infectedrecord.PlacesTable,
			Columns: infectedrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InfectedRecord{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{infectedrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
