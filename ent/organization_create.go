// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/district"
	"opencensus/core/ent/organization"
	"opencensus/core/ent/oxygenrecord"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (oc *OrganizationCreate) SetName(s string) *OrganizationCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetCode sets the "code" field.
func (oc *OrganizationCreate) SetCode(s string) *OrganizationCreate {
	oc.mutation.SetCode(s)
	return oc
}

// SetUbigeo sets the "ubigeo" field.
func (oc *OrganizationCreate) SetUbigeo(s string) *OrganizationCreate {
	oc.mutation.SetUbigeo(s)
	return oc
}

// SetKind sets the "kind" field.
func (oc *OrganizationCreate) SetKind(s string) *OrganizationCreate {
	oc.mutation.SetKind(s)
	return oc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableKind(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetKind(*s)
	}
	return oc
}

// SetCovidZone sets the "covidZone" field.
func (oc *OrganizationCreate) SetCovidZone(b bool) *OrganizationCreate {
	oc.mutation.SetCovidZone(b)
	return oc
}

// SetNillableCovidZone sets the "covidZone" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCovidZone(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetCovidZone(*b)
	}
	return oc
}

// SetCategory sets the "category" field.
func (oc *OrganizationCreate) SetCategory(s string) *OrganizationCreate {
	oc.mutation.SetCategory(s)
	return oc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCategory(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetCategory(*s)
	}
	return oc
}

// AddRegionIDs adds the "region" edge to the Region entity by IDs.
func (oc *OrganizationCreate) AddRegionIDs(ids ...int) *OrganizationCreate {
	oc.mutation.AddRegionIDs(ids...)
	return oc
}

// AddRegion adds the "region" edges to the Region entity.
func (oc *OrganizationCreate) AddRegion(r ...*Region) *OrganizationCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oc.AddRegionIDs(ids...)
}

// AddProvinceIDs adds the "province" edge to the Province entity by IDs.
func (oc *OrganizationCreate) AddProvinceIDs(ids ...int) *OrganizationCreate {
	oc.mutation.AddProvinceIDs(ids...)
	return oc
}

// AddProvince adds the "province" edges to the Province entity.
func (oc *OrganizationCreate) AddProvince(p ...*Province) *OrganizationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddProvinceIDs(ids...)
}

// AddDistrictIDs adds the "district" edge to the District entity by IDs.
func (oc *OrganizationCreate) AddDistrictIDs(ids ...int) *OrganizationCreate {
	oc.mutation.AddDistrictIDs(ids...)
	return oc
}

// AddDistrict adds the "district" edges to the District entity.
func (oc *OrganizationCreate) AddDistrict(d ...*District) *OrganizationCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oc.AddDistrictIDs(ids...)
}

// AddOxygenRecordIDs adds the "oxygenRecords" edge to the OxygenRecord entity by IDs.
func (oc *OrganizationCreate) AddOxygenRecordIDs(ids ...int) *OrganizationCreate {
	oc.mutation.AddOxygenRecordIDs(ids...)
	return oc
}

// AddOxygenRecords adds the "oxygenRecords" edges to the OxygenRecord entity.
func (oc *OrganizationCreate) AddOxygenRecords(o ...*OxygenRecord) *OrganizationCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOxygenRecordIDs(ids...)
}

// AddBedRecordIDs adds the "bedRecords" edge to the BedRecord entity by IDs.
func (oc *OrganizationCreate) AddBedRecordIDs(ids ...int) *OrganizationCreate {
	oc.mutation.AddBedRecordIDs(ids...)
	return oc
}

// AddBedRecords adds the "bedRecords" edges to the BedRecord entity.
func (oc *OrganizationCreate) AddBedRecords(b ...*BedRecord) *OrganizationCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return oc.AddBedRecordIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (oc *OrganizationCreate) Mutation() *OrganizationMutation {
	return oc.mutation
}

// Save creates the Organization in the database.
func (oc *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	var (
		err  error
		node *Organization
	)
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrganizationCreate) check() error {
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := oc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := oc.mutation.Ubigeo(); !ok {
		return &ValidationError{Name: "ubigeo", err: errors.New("ent: missing required field \"ubigeo\"")}
	}
	return nil
}

func (oc *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: organization.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldName,
		})
		_node.Name = value
	}
	if value, ok := oc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := oc.mutation.Ubigeo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldUbigeo,
		})
		_node.Ubigeo = value
	}
	if value, ok := oc.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldKind,
		})
		_node.Kind = value
	}
	if value, ok := oc.mutation.CovidZone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: organization.FieldCovidZone,
		})
		_node.CovidZone = value
	}
	if value, ok := oc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldCategory,
		})
		_node.Category = value
	}
	if nodes := oc.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OxygenRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.BedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	builders []*OrganizationCreate
}

// Save creates the Organization entities in the database.
func (ocb *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Organization, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
