// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/deathrecord"
	"opencensus/core/ent/district"
	"opencensus/core/ent/infectedrecord"
	"opencensus/core/ent/oxygenrecord"
	"opencensus/core/ent/place"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceCreate is the builder for creating a Place entity.
type PlaceCreate struct {
	config
	mutation *PlaceMutation
	hooks    []Hook
}

// SetKind sets the "kind" field.
func (pc *PlaceCreate) SetKind(s string) *PlaceCreate {
	pc.mutation.SetKind(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PlaceCreate) SetName(s string) *PlaceCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPolitic sets the "politic" field.
func (pc *PlaceCreate) SetPolitic(s string) *PlaceCreate {
	pc.mutation.SetPolitic(s)
	return pc
}

// SetNillablePolitic sets the "politic" field if the given value is not nil.
func (pc *PlaceCreate) SetNillablePolitic(s *string) *PlaceCreate {
	if s != nil {
		pc.SetPolitic(*s)
	}
	return pc
}

// SetUbigeo sets the "ubigeo" field.
func (pc *PlaceCreate) SetUbigeo(s string) *PlaceCreate {
	pc.mutation.SetUbigeo(s)
	return pc
}

// SetNillableUbigeo sets the "ubigeo" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableUbigeo(s *string) *PlaceCreate {
	if s != nil {
		pc.SetUbigeo(*s)
	}
	return pc
}

// SetCovidZone sets the "covidZone" field.
func (pc *PlaceCreate) SetCovidZone(b bool) *PlaceCreate {
	pc.mutation.SetCovidZone(b)
	return pc
}

// SetNillableCovidZone sets the "covidZone" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableCovidZone(b *bool) *PlaceCreate {
	if b != nil {
		pc.SetCovidZone(*b)
	}
	return pc
}

// SetLat sets the "lat" field.
func (pc *PlaceCreate) SetLat(f float64) *PlaceCreate {
	pc.mutation.SetLat(f)
	return pc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableLat(f *float64) *PlaceCreate {
	if f != nil {
		pc.SetLat(*f)
	}
	return pc
}

// SetLon sets the "lon" field.
func (pc *PlaceCreate) SetLon(f float64) *PlaceCreate {
	pc.mutation.SetLon(f)
	return pc
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableLon(f *float64) *PlaceCreate {
	if f != nil {
		pc.SetLon(*f)
	}
	return pc
}

// AddOxygenrecordIDs adds the "oxygenrecords" edge to the OxygenRecord entity by IDs.
func (pc *PlaceCreate) AddOxygenrecordIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddOxygenrecordIDs(ids...)
	return pc
}

// AddOxygenrecords adds the "oxygenrecords" edges to the OxygenRecord entity.
func (pc *PlaceCreate) AddOxygenrecords(o ...*OxygenRecord) *PlaceCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOxygenrecordIDs(ids...)
}

// AddBedRecordIDs adds the "bedRecords" edge to the BedRecord entity by IDs.
func (pc *PlaceCreate) AddBedRecordIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddBedRecordIDs(ids...)
	return pc
}

// AddBedRecords adds the "bedRecords" edges to the BedRecord entity.
func (pc *PlaceCreate) AddBedRecords(b ...*BedRecord) *PlaceCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBedRecordIDs(ids...)
}

// AddDeathRecordIDs adds the "deathRecords" edge to the DeathRecord entity by IDs.
func (pc *PlaceCreate) AddDeathRecordIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddDeathRecordIDs(ids...)
	return pc
}

// AddDeathRecords adds the "deathRecords" edges to the DeathRecord entity.
func (pc *PlaceCreate) AddDeathRecords(d ...*DeathRecord) *PlaceCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDeathRecordIDs(ids...)
}

// AddInfectedRecordIDs adds the "infectedRecords" edge to the InfectedRecord entity by IDs.
func (pc *PlaceCreate) AddInfectedRecordIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddInfectedRecordIDs(ids...)
	return pc
}

// AddInfectedRecords adds the "infectedRecords" edges to the InfectedRecord entity.
func (pc *PlaceCreate) AddInfectedRecords(i ...*InfectedRecord) *PlaceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddInfectedRecordIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the Region entity by IDs.
func (pc *PlaceCreate) AddRegionIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddRegionIDs(ids...)
	return pc
}

// AddRegions adds the "regions" edges to the Region entity.
func (pc *PlaceCreate) AddRegions(r ...*Region) *PlaceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRegionIDs(ids...)
}

// AddProvinceIDs adds the "provinces" edge to the Province entity by IDs.
func (pc *PlaceCreate) AddProvinceIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddProvinceIDs(ids...)
	return pc
}

// AddProvinces adds the "provinces" edges to the Province entity.
func (pc *PlaceCreate) AddProvinces(p ...*Province) *PlaceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProvinceIDs(ids...)
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (pc *PlaceCreate) AddDistrictIDs(ids ...int) *PlaceCreate {
	pc.mutation.AddDistrictIDs(ids...)
	return pc
}

// AddDistricts adds the "districts" edges to the District entity.
func (pc *PlaceCreate) AddDistricts(d ...*District) *PlaceCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDistrictIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (pc *PlaceCreate) Mutation() *PlaceMutation {
	return pc.mutation
}

// Save creates the Place in the database.
func (pc *PlaceCreate) Save(ctx context.Context) (*Place, error) {
	var (
		err  error
		node *Place
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlaceCreate) SaveX(ctx context.Context) *Place {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlaceCreate) check() error {
	if _, ok := pc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New("ent: missing required field \"kind\"")}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (pc *PlaceCreate) sqlSave(ctx context.Context) (*Place, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PlaceCreate) createSpec() (*Place, *sqlgraph.CreateSpec) {
	var (
		_node = &Place{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: place.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: place.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldKind,
		})
		_node.Kind = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Politic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldPolitic,
		})
		_node.Politic = value
	}
	if value, ok := pc.mutation.Ubigeo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldUbigeo,
		})
		_node.Ubigeo = value
	}
	if value, ok := pc.mutation.CovidZone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: place.FieldCovidZone,
		})
		_node.CovidZone = value
	}
	if value, ok := pc.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLat,
		})
		_node.Lat = value
	}
	if value, ok := pc.mutation.Lon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLon,
		})
		_node.Lon = value
	}
	if nodes := pc.mutation.OxygenrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DeathRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.InfectedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProvincesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaceCreateBulk is the builder for creating many Place entities in bulk.
type PlaceCreateBulk struct {
	config
	builders []*PlaceCreate
}

// Save creates the Place entities in the database.
func (pcb *PlaceCreateBulk) Save(ctx context.Context) ([]*Place, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Place, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlaceCreateBulk) SaveX(ctx context.Context) []*Place {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
