// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opencensus/core/ent/organization"
	"opencensus/core/ent/oxygenrecord"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OxygenRecordCreate is the builder for creating a OxygenRecord entity.
type OxygenRecordCreate struct {
	config
	mutation *OxygenRecordMutation
	hooks    []Hook
}

// SetTotalCylinders sets the "totalCylinders" field.
func (orc *OxygenRecordCreate) SetTotalCylinders(i int) *OxygenRecordCreate {
	orc.mutation.SetTotalCylinders(i)
	return orc
}

// SetTotalOwnCylinders sets the "totalOwnCylinders" field.
func (orc *OxygenRecordCreate) SetTotalOwnCylinders(i int) *OxygenRecordCreate {
	orc.mutation.SetTotalOwnCylinders(i)
	return orc
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (orc *OxygenRecordCreate) AddOrganizationIDs(ids ...int) *OxygenRecordCreate {
	orc.mutation.AddOrganizationIDs(ids...)
	return orc
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (orc *OxygenRecordCreate) AddOrganization(o ...*Organization) *OxygenRecordCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddOrganizationIDs(ids...)
}

// Mutation returns the OxygenRecordMutation object of the builder.
func (orc *OxygenRecordCreate) Mutation() *OxygenRecordMutation {
	return orc.mutation
}

// Save creates the OxygenRecord in the database.
func (orc *OxygenRecordCreate) Save(ctx context.Context) (*OxygenRecord, error) {
	var (
		err  error
		node *OxygenRecord
	)
	if len(orc.hooks) == 0 {
		if err = orc.check(); err != nil {
			return nil, err
		}
		node, err = orc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OxygenRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = orc.check(); err != nil {
				return nil, err
			}
			orc.mutation = mutation
			node, err = orc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(orc.hooks) - 1; i >= 0; i-- {
			mut = orc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, orc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OxygenRecordCreate) SaveX(ctx context.Context) *OxygenRecord {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (orc *OxygenRecordCreate) check() error {
	if _, ok := orc.mutation.TotalCylinders(); !ok {
		return &ValidationError{Name: "totalCylinders", err: errors.New("ent: missing required field \"totalCylinders\"")}
	}
	if _, ok := orc.mutation.TotalOwnCylinders(); !ok {
		return &ValidationError{Name: "totalOwnCylinders", err: errors.New("ent: missing required field \"totalOwnCylinders\"")}
	}
	return nil
}

func (orc *OxygenRecordCreate) sqlSave(ctx context.Context) (*OxygenRecord, error) {
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (orc *OxygenRecordCreate) createSpec() (*OxygenRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &OxygenRecord{config: orc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oxygenrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oxygenrecord.FieldID,
			},
		}
	)
	if value, ok := orc.mutation.TotalCylinders(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oxygenrecord.FieldTotalCylinders,
		})
		_node.TotalCylinders = value
	}
	if value, ok := orc.mutation.TotalOwnCylinders(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oxygenrecord.FieldTotalOwnCylinders,
		})
		_node.TotalOwnCylinders = value
	}
	if nodes := orc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oxygenrecord.OrganizationTable,
			Columns: oxygenrecord.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OxygenRecordCreateBulk is the builder for creating many OxygenRecord entities in bulk.
type OxygenRecordCreateBulk struct {
	config
	builders []*OxygenRecordCreate
}

// Save creates the OxygenRecord entities in the database.
func (orcb *OxygenRecordCreateBulk) Save(ctx context.Context) ([]*OxygenRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OxygenRecord, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OxygenRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OxygenRecordCreateBulk) SaveX(ctx context.Context) []*OxygenRecord {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
