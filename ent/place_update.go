// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/deathrecord"
	"opencensus/core/ent/district"
	"opencensus/core/ent/infectedrecord"
	"opencensus/core/ent/oxygenrecord"
	"opencensus/core/ent/place"
	"opencensus/core/ent/predicate"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceUpdate is the builder for updating Place entities.
type PlaceUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceMutation
}

// Where adds a new predicate for the PlaceUpdate builder.
func (pu *PlaceUpdate) Where(ps ...predicate.Place) *PlaceUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetKind sets the "kind" field.
func (pu *PlaceUpdate) SetKind(s string) *PlaceUpdate {
	pu.mutation.SetKind(s)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaceUpdate) SetName(s string) *PlaceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPolitic sets the "politic" field.
func (pu *PlaceUpdate) SetPolitic(s string) *PlaceUpdate {
	pu.mutation.SetPolitic(s)
	return pu
}

// SetNillablePolitic sets the "politic" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillablePolitic(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetPolitic(*s)
	}
	return pu
}

// ClearPolitic clears the value of the "politic" field.
func (pu *PlaceUpdate) ClearPolitic() *PlaceUpdate {
	pu.mutation.ClearPolitic()
	return pu
}

// SetUbigeo sets the "ubigeo" field.
func (pu *PlaceUpdate) SetUbigeo(s string) *PlaceUpdate {
	pu.mutation.SetUbigeo(s)
	return pu
}

// SetNillableUbigeo sets the "ubigeo" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableUbigeo(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetUbigeo(*s)
	}
	return pu
}

// ClearUbigeo clears the value of the "ubigeo" field.
func (pu *PlaceUpdate) ClearUbigeo() *PlaceUpdate {
	pu.mutation.ClearUbigeo()
	return pu
}

// SetCovidZone sets the "covidZone" field.
func (pu *PlaceUpdate) SetCovidZone(b bool) *PlaceUpdate {
	pu.mutation.SetCovidZone(b)
	return pu
}

// SetNillableCovidZone sets the "covidZone" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableCovidZone(b *bool) *PlaceUpdate {
	if b != nil {
		pu.SetCovidZone(*b)
	}
	return pu
}

// ClearCovidZone clears the value of the "covidZone" field.
func (pu *PlaceUpdate) ClearCovidZone() *PlaceUpdate {
	pu.mutation.ClearCovidZone()
	return pu
}

// SetLat sets the "lat" field.
func (pu *PlaceUpdate) SetLat(f float64) *PlaceUpdate {
	pu.mutation.ResetLat()
	pu.mutation.SetLat(f)
	return pu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableLat(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetLat(*f)
	}
	return pu
}

// AddLat adds f to the "lat" field.
func (pu *PlaceUpdate) AddLat(f float64) *PlaceUpdate {
	pu.mutation.AddLat(f)
	return pu
}

// ClearLat clears the value of the "lat" field.
func (pu *PlaceUpdate) ClearLat() *PlaceUpdate {
	pu.mutation.ClearLat()
	return pu
}

// SetLon sets the "lon" field.
func (pu *PlaceUpdate) SetLon(f float64) *PlaceUpdate {
	pu.mutation.ResetLon()
	pu.mutation.SetLon(f)
	return pu
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableLon(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetLon(*f)
	}
	return pu
}

// AddLon adds f to the "lon" field.
func (pu *PlaceUpdate) AddLon(f float64) *PlaceUpdate {
	pu.mutation.AddLon(f)
	return pu
}

// ClearLon clears the value of the "lon" field.
func (pu *PlaceUpdate) ClearLon() *PlaceUpdate {
	pu.mutation.ClearLon()
	return pu
}

// AddOxygenrecordIDs adds the "oxygenrecords" edge to the OxygenRecord entity by IDs.
func (pu *PlaceUpdate) AddOxygenrecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddOxygenrecordIDs(ids...)
	return pu
}

// AddOxygenrecords adds the "oxygenrecords" edges to the OxygenRecord entity.
func (pu *PlaceUpdate) AddOxygenrecords(o ...*OxygenRecord) *PlaceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOxygenrecordIDs(ids...)
}

// AddBedRecordIDs adds the "bedRecords" edge to the BedRecord entity by IDs.
func (pu *PlaceUpdate) AddBedRecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddBedRecordIDs(ids...)
	return pu
}

// AddBedRecords adds the "bedRecords" edges to the BedRecord entity.
func (pu *PlaceUpdate) AddBedRecords(b ...*BedRecord) *PlaceUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBedRecordIDs(ids...)
}

// AddDeathRecordIDs adds the "deathRecords" edge to the DeathRecord entity by IDs.
func (pu *PlaceUpdate) AddDeathRecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddDeathRecordIDs(ids...)
	return pu
}

// AddDeathRecords adds the "deathRecords" edges to the DeathRecord entity.
func (pu *PlaceUpdate) AddDeathRecords(d ...*DeathRecord) *PlaceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDeathRecordIDs(ids...)
}

// AddInfectedRecordIDs adds the "infectedRecords" edge to the InfectedRecord entity by IDs.
func (pu *PlaceUpdate) AddInfectedRecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddInfectedRecordIDs(ids...)
	return pu
}

// AddInfectedRecords adds the "infectedRecords" edges to the InfectedRecord entity.
func (pu *PlaceUpdate) AddInfectedRecords(i ...*InfectedRecord) *PlaceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInfectedRecordIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the Region entity by IDs.
func (pu *PlaceUpdate) AddRegionIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddRegionIDs(ids...)
	return pu
}

// AddRegions adds the "regions" edges to the Region entity.
func (pu *PlaceUpdate) AddRegions(r ...*Region) *PlaceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRegionIDs(ids...)
}

// AddProvinceIDs adds the "provinces" edge to the Province entity by IDs.
func (pu *PlaceUpdate) AddProvinceIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddProvinceIDs(ids...)
	return pu
}

// AddProvinces adds the "provinces" edges to the Province entity.
func (pu *PlaceUpdate) AddProvinces(p ...*Province) *PlaceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProvinceIDs(ids...)
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (pu *PlaceUpdate) AddDistrictIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddDistrictIDs(ids...)
	return pu
}

// AddDistricts adds the "districts" edges to the District entity.
func (pu *PlaceUpdate) AddDistricts(d ...*District) *PlaceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDistrictIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (pu *PlaceUpdate) Mutation() *PlaceMutation {
	return pu.mutation
}

// ClearOxygenrecords clears all "oxygenrecords" edges to the OxygenRecord entity.
func (pu *PlaceUpdate) ClearOxygenrecords() *PlaceUpdate {
	pu.mutation.ClearOxygenrecords()
	return pu
}

// RemoveOxygenrecordIDs removes the "oxygenrecords" edge to OxygenRecord entities by IDs.
func (pu *PlaceUpdate) RemoveOxygenrecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveOxygenrecordIDs(ids...)
	return pu
}

// RemoveOxygenrecords removes "oxygenrecords" edges to OxygenRecord entities.
func (pu *PlaceUpdate) RemoveOxygenrecords(o ...*OxygenRecord) *PlaceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOxygenrecordIDs(ids...)
}

// ClearBedRecords clears all "bedRecords" edges to the BedRecord entity.
func (pu *PlaceUpdate) ClearBedRecords() *PlaceUpdate {
	pu.mutation.ClearBedRecords()
	return pu
}

// RemoveBedRecordIDs removes the "bedRecords" edge to BedRecord entities by IDs.
func (pu *PlaceUpdate) RemoveBedRecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveBedRecordIDs(ids...)
	return pu
}

// RemoveBedRecords removes "bedRecords" edges to BedRecord entities.
func (pu *PlaceUpdate) RemoveBedRecords(b ...*BedRecord) *PlaceUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBedRecordIDs(ids...)
}

// ClearDeathRecords clears all "deathRecords" edges to the DeathRecord entity.
func (pu *PlaceUpdate) ClearDeathRecords() *PlaceUpdate {
	pu.mutation.ClearDeathRecords()
	return pu
}

// RemoveDeathRecordIDs removes the "deathRecords" edge to DeathRecord entities by IDs.
func (pu *PlaceUpdate) RemoveDeathRecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveDeathRecordIDs(ids...)
	return pu
}

// RemoveDeathRecords removes "deathRecords" edges to DeathRecord entities.
func (pu *PlaceUpdate) RemoveDeathRecords(d ...*DeathRecord) *PlaceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDeathRecordIDs(ids...)
}

// ClearInfectedRecords clears all "infectedRecords" edges to the InfectedRecord entity.
func (pu *PlaceUpdate) ClearInfectedRecords() *PlaceUpdate {
	pu.mutation.ClearInfectedRecords()
	return pu
}

// RemoveInfectedRecordIDs removes the "infectedRecords" edge to InfectedRecord entities by IDs.
func (pu *PlaceUpdate) RemoveInfectedRecordIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveInfectedRecordIDs(ids...)
	return pu
}

// RemoveInfectedRecords removes "infectedRecords" edges to InfectedRecord entities.
func (pu *PlaceUpdate) RemoveInfectedRecords(i ...*InfectedRecord) *PlaceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInfectedRecordIDs(ids...)
}

// ClearRegions clears all "regions" edges to the Region entity.
func (pu *PlaceUpdate) ClearRegions() *PlaceUpdate {
	pu.mutation.ClearRegions()
	return pu
}

// RemoveRegionIDs removes the "regions" edge to Region entities by IDs.
func (pu *PlaceUpdate) RemoveRegionIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveRegionIDs(ids...)
	return pu
}

// RemoveRegions removes "regions" edges to Region entities.
func (pu *PlaceUpdate) RemoveRegions(r ...*Region) *PlaceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRegionIDs(ids...)
}

// ClearProvinces clears all "provinces" edges to the Province entity.
func (pu *PlaceUpdate) ClearProvinces() *PlaceUpdate {
	pu.mutation.ClearProvinces()
	return pu
}

// RemoveProvinceIDs removes the "provinces" edge to Province entities by IDs.
func (pu *PlaceUpdate) RemoveProvinceIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveProvinceIDs(ids...)
	return pu
}

// RemoveProvinces removes "provinces" edges to Province entities.
func (pu *PlaceUpdate) RemoveProvinces(p ...*Province) *PlaceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProvinceIDs(ids...)
}

// ClearDistricts clears all "districts" edges to the District entity.
func (pu *PlaceUpdate) ClearDistricts() *PlaceUpdate {
	pu.mutation.ClearDistricts()
	return pu
}

// RemoveDistrictIDs removes the "districts" edge to District entities by IDs.
func (pu *PlaceUpdate) RemoveDistrictIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemoveDistrictIDs(ids...)
	return pu
}

// RemoveDistricts removes "districts" edges to District entities.
func (pu *PlaceUpdate) RemoveDistricts(d ...*District) *PlaceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDistrictIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   place.Table,
			Columns: place.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: place.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldKind,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldName,
		})
	}
	if value, ok := pu.mutation.Politic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldPolitic,
		})
	}
	if pu.mutation.PoliticCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: place.FieldPolitic,
		})
	}
	if value, ok := pu.mutation.Ubigeo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldUbigeo,
		})
	}
	if pu.mutation.UbigeoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: place.FieldUbigeo,
		})
	}
	if value, ok := pu.mutation.CovidZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: place.FieldCovidZone,
		})
	}
	if pu.mutation.CovidZoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: place.FieldCovidZone,
		})
	}
	if value, ok := pu.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLat,
		})
	}
	if value, ok := pu.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLat,
		})
	}
	if pu.mutation.LatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: place.FieldLat,
		})
	}
	if value, ok := pu.mutation.Lon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLon,
		})
	}
	if value, ok := pu.mutation.AddedLon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLon,
		})
	}
	if pu.mutation.LonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: place.FieldLon,
		})
	}
	if pu.mutation.OxygenrecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOxygenrecordsIDs(); len(nodes) > 0 && !pu.mutation.OxygenrecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OxygenrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBedRecordsIDs(); len(nodes) > 0 && !pu.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DeathRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDeathRecordsIDs(); len(nodes) > 0 && !pu.mutation.DeathRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DeathRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InfectedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInfectedRecordsIDs(); len(nodes) > 0 && !pu.mutation.InfectedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InfectedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !pu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProvincesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProvincesIDs(); len(nodes) > 0 && !pu.mutation.ProvincesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProvincesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDistrictsIDs(); len(nodes) > 0 && !pu.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlaceUpdateOne is the builder for updating a single Place entity.
type PlaceUpdateOne struct {
	config
	hooks    []Hook
	mutation *PlaceMutation
}

// SetKind sets the "kind" field.
func (puo *PlaceUpdateOne) SetKind(s string) *PlaceUpdateOne {
	puo.mutation.SetKind(s)
	return puo
}

// SetName sets the "name" field.
func (puo *PlaceUpdateOne) SetName(s string) *PlaceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPolitic sets the "politic" field.
func (puo *PlaceUpdateOne) SetPolitic(s string) *PlaceUpdateOne {
	puo.mutation.SetPolitic(s)
	return puo
}

// SetNillablePolitic sets the "politic" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillablePolitic(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetPolitic(*s)
	}
	return puo
}

// ClearPolitic clears the value of the "politic" field.
func (puo *PlaceUpdateOne) ClearPolitic() *PlaceUpdateOne {
	puo.mutation.ClearPolitic()
	return puo
}

// SetUbigeo sets the "ubigeo" field.
func (puo *PlaceUpdateOne) SetUbigeo(s string) *PlaceUpdateOne {
	puo.mutation.SetUbigeo(s)
	return puo
}

// SetNillableUbigeo sets the "ubigeo" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableUbigeo(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetUbigeo(*s)
	}
	return puo
}

// ClearUbigeo clears the value of the "ubigeo" field.
func (puo *PlaceUpdateOne) ClearUbigeo() *PlaceUpdateOne {
	puo.mutation.ClearUbigeo()
	return puo
}

// SetCovidZone sets the "covidZone" field.
func (puo *PlaceUpdateOne) SetCovidZone(b bool) *PlaceUpdateOne {
	puo.mutation.SetCovidZone(b)
	return puo
}

// SetNillableCovidZone sets the "covidZone" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableCovidZone(b *bool) *PlaceUpdateOne {
	if b != nil {
		puo.SetCovidZone(*b)
	}
	return puo
}

// ClearCovidZone clears the value of the "covidZone" field.
func (puo *PlaceUpdateOne) ClearCovidZone() *PlaceUpdateOne {
	puo.mutation.ClearCovidZone()
	return puo
}

// SetLat sets the "lat" field.
func (puo *PlaceUpdateOne) SetLat(f float64) *PlaceUpdateOne {
	puo.mutation.ResetLat()
	puo.mutation.SetLat(f)
	return puo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableLat(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetLat(*f)
	}
	return puo
}

// AddLat adds f to the "lat" field.
func (puo *PlaceUpdateOne) AddLat(f float64) *PlaceUpdateOne {
	puo.mutation.AddLat(f)
	return puo
}

// ClearLat clears the value of the "lat" field.
func (puo *PlaceUpdateOne) ClearLat() *PlaceUpdateOne {
	puo.mutation.ClearLat()
	return puo
}

// SetLon sets the "lon" field.
func (puo *PlaceUpdateOne) SetLon(f float64) *PlaceUpdateOne {
	puo.mutation.ResetLon()
	puo.mutation.SetLon(f)
	return puo
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableLon(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetLon(*f)
	}
	return puo
}

// AddLon adds f to the "lon" field.
func (puo *PlaceUpdateOne) AddLon(f float64) *PlaceUpdateOne {
	puo.mutation.AddLon(f)
	return puo
}

// ClearLon clears the value of the "lon" field.
func (puo *PlaceUpdateOne) ClearLon() *PlaceUpdateOne {
	puo.mutation.ClearLon()
	return puo
}

// AddOxygenrecordIDs adds the "oxygenrecords" edge to the OxygenRecord entity by IDs.
func (puo *PlaceUpdateOne) AddOxygenrecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddOxygenrecordIDs(ids...)
	return puo
}

// AddOxygenrecords adds the "oxygenrecords" edges to the OxygenRecord entity.
func (puo *PlaceUpdateOne) AddOxygenrecords(o ...*OxygenRecord) *PlaceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOxygenrecordIDs(ids...)
}

// AddBedRecordIDs adds the "bedRecords" edge to the BedRecord entity by IDs.
func (puo *PlaceUpdateOne) AddBedRecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddBedRecordIDs(ids...)
	return puo
}

// AddBedRecords adds the "bedRecords" edges to the BedRecord entity.
func (puo *PlaceUpdateOne) AddBedRecords(b ...*BedRecord) *PlaceUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBedRecordIDs(ids...)
}

// AddDeathRecordIDs adds the "deathRecords" edge to the DeathRecord entity by IDs.
func (puo *PlaceUpdateOne) AddDeathRecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddDeathRecordIDs(ids...)
	return puo
}

// AddDeathRecords adds the "deathRecords" edges to the DeathRecord entity.
func (puo *PlaceUpdateOne) AddDeathRecords(d ...*DeathRecord) *PlaceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDeathRecordIDs(ids...)
}

// AddInfectedRecordIDs adds the "infectedRecords" edge to the InfectedRecord entity by IDs.
func (puo *PlaceUpdateOne) AddInfectedRecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddInfectedRecordIDs(ids...)
	return puo
}

// AddInfectedRecords adds the "infectedRecords" edges to the InfectedRecord entity.
func (puo *PlaceUpdateOne) AddInfectedRecords(i ...*InfectedRecord) *PlaceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInfectedRecordIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the Region entity by IDs.
func (puo *PlaceUpdateOne) AddRegionIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddRegionIDs(ids...)
	return puo
}

// AddRegions adds the "regions" edges to the Region entity.
func (puo *PlaceUpdateOne) AddRegions(r ...*Region) *PlaceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRegionIDs(ids...)
}

// AddProvinceIDs adds the "provinces" edge to the Province entity by IDs.
func (puo *PlaceUpdateOne) AddProvinceIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddProvinceIDs(ids...)
	return puo
}

// AddProvinces adds the "provinces" edges to the Province entity.
func (puo *PlaceUpdateOne) AddProvinces(p ...*Province) *PlaceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProvinceIDs(ids...)
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (puo *PlaceUpdateOne) AddDistrictIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddDistrictIDs(ids...)
	return puo
}

// AddDistricts adds the "districts" edges to the District entity.
func (puo *PlaceUpdateOne) AddDistricts(d ...*District) *PlaceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDistrictIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (puo *PlaceUpdateOne) Mutation() *PlaceMutation {
	return puo.mutation
}

// ClearOxygenrecords clears all "oxygenrecords" edges to the OxygenRecord entity.
func (puo *PlaceUpdateOne) ClearOxygenrecords() *PlaceUpdateOne {
	puo.mutation.ClearOxygenrecords()
	return puo
}

// RemoveOxygenrecordIDs removes the "oxygenrecords" edge to OxygenRecord entities by IDs.
func (puo *PlaceUpdateOne) RemoveOxygenrecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveOxygenrecordIDs(ids...)
	return puo
}

// RemoveOxygenrecords removes "oxygenrecords" edges to OxygenRecord entities.
func (puo *PlaceUpdateOne) RemoveOxygenrecords(o ...*OxygenRecord) *PlaceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOxygenrecordIDs(ids...)
}

// ClearBedRecords clears all "bedRecords" edges to the BedRecord entity.
func (puo *PlaceUpdateOne) ClearBedRecords() *PlaceUpdateOne {
	puo.mutation.ClearBedRecords()
	return puo
}

// RemoveBedRecordIDs removes the "bedRecords" edge to BedRecord entities by IDs.
func (puo *PlaceUpdateOne) RemoveBedRecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveBedRecordIDs(ids...)
	return puo
}

// RemoveBedRecords removes "bedRecords" edges to BedRecord entities.
func (puo *PlaceUpdateOne) RemoveBedRecords(b ...*BedRecord) *PlaceUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBedRecordIDs(ids...)
}

// ClearDeathRecords clears all "deathRecords" edges to the DeathRecord entity.
func (puo *PlaceUpdateOne) ClearDeathRecords() *PlaceUpdateOne {
	puo.mutation.ClearDeathRecords()
	return puo
}

// RemoveDeathRecordIDs removes the "deathRecords" edge to DeathRecord entities by IDs.
func (puo *PlaceUpdateOne) RemoveDeathRecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveDeathRecordIDs(ids...)
	return puo
}

// RemoveDeathRecords removes "deathRecords" edges to DeathRecord entities.
func (puo *PlaceUpdateOne) RemoveDeathRecords(d ...*DeathRecord) *PlaceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDeathRecordIDs(ids...)
}

// ClearInfectedRecords clears all "infectedRecords" edges to the InfectedRecord entity.
func (puo *PlaceUpdateOne) ClearInfectedRecords() *PlaceUpdateOne {
	puo.mutation.ClearInfectedRecords()
	return puo
}

// RemoveInfectedRecordIDs removes the "infectedRecords" edge to InfectedRecord entities by IDs.
func (puo *PlaceUpdateOne) RemoveInfectedRecordIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveInfectedRecordIDs(ids...)
	return puo
}

// RemoveInfectedRecords removes "infectedRecords" edges to InfectedRecord entities.
func (puo *PlaceUpdateOne) RemoveInfectedRecords(i ...*InfectedRecord) *PlaceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInfectedRecordIDs(ids...)
}

// ClearRegions clears all "regions" edges to the Region entity.
func (puo *PlaceUpdateOne) ClearRegions() *PlaceUpdateOne {
	puo.mutation.ClearRegions()
	return puo
}

// RemoveRegionIDs removes the "regions" edge to Region entities by IDs.
func (puo *PlaceUpdateOne) RemoveRegionIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveRegionIDs(ids...)
	return puo
}

// RemoveRegions removes "regions" edges to Region entities.
func (puo *PlaceUpdateOne) RemoveRegions(r ...*Region) *PlaceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRegionIDs(ids...)
}

// ClearProvinces clears all "provinces" edges to the Province entity.
func (puo *PlaceUpdateOne) ClearProvinces() *PlaceUpdateOne {
	puo.mutation.ClearProvinces()
	return puo
}

// RemoveProvinceIDs removes the "provinces" edge to Province entities by IDs.
func (puo *PlaceUpdateOne) RemoveProvinceIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveProvinceIDs(ids...)
	return puo
}

// RemoveProvinces removes "provinces" edges to Province entities.
func (puo *PlaceUpdateOne) RemoveProvinces(p ...*Province) *PlaceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProvinceIDs(ids...)
}

// ClearDistricts clears all "districts" edges to the District entity.
func (puo *PlaceUpdateOne) ClearDistricts() *PlaceUpdateOne {
	puo.mutation.ClearDistricts()
	return puo
}

// RemoveDistrictIDs removes the "districts" edge to District entities by IDs.
func (puo *PlaceUpdateOne) RemoveDistrictIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemoveDistrictIDs(ids...)
	return puo
}

// RemoveDistricts removes "districts" edges to District entities.
func (puo *PlaceUpdateOne) RemoveDistricts(d ...*District) *PlaceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDistrictIDs(ids...)
}

// Save executes the query and returns the updated Place entity.
func (puo *PlaceUpdateOne) Save(ctx context.Context) (*Place, error) {
	var (
		err  error
		node *Place
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaceUpdateOne) SaveX(ctx context.Context) *Place {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlaceUpdateOne) sqlSave(ctx context.Context) (_node *Place, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   place.Table,
			Columns: place.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: place.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Place.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldKind,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldName,
		})
	}
	if value, ok := puo.mutation.Politic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldPolitic,
		})
	}
	if puo.mutation.PoliticCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: place.FieldPolitic,
		})
	}
	if value, ok := puo.mutation.Ubigeo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldUbigeo,
		})
	}
	if puo.mutation.UbigeoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: place.FieldUbigeo,
		})
	}
	if value, ok := puo.mutation.CovidZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: place.FieldCovidZone,
		})
	}
	if puo.mutation.CovidZoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: place.FieldCovidZone,
		})
	}
	if value, ok := puo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLat,
		})
	}
	if value, ok := puo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLat,
		})
	}
	if puo.mutation.LatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: place.FieldLat,
		})
	}
	if value, ok := puo.mutation.Lon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLon,
		})
	}
	if value, ok := puo.mutation.AddedLon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: place.FieldLon,
		})
	}
	if puo.mutation.LonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: place.FieldLon,
		})
	}
	if puo.mutation.OxygenrecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOxygenrecordsIDs(); len(nodes) > 0 && !puo.mutation.OxygenrecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OxygenrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.OxygenrecordsTable,
			Columns: place.OxygenrecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBedRecordsIDs(); len(nodes) > 0 && !puo.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.BedRecordsTable,
			Columns: place.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DeathRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDeathRecordsIDs(); len(nodes) > 0 && !puo.mutation.DeathRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DeathRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.DeathRecordsTable,
			Columns: place.DeathRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InfectedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInfectedRecordsIDs(); len(nodes) > 0 && !puo.mutation.InfectedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InfectedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.InfectedRecordsTable,
			Columns: place.InfectedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: infectedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !puo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.RegionsTable,
			Columns: place.RegionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProvincesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProvincesIDs(); len(nodes) > 0 && !puo.mutation.ProvincesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProvincesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.ProvincesTable,
			Columns: place.ProvincesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDistrictsIDs(); len(nodes) > 0 && !puo.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   place.DistrictsTable,
			Columns: place.DistrictsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Place{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
