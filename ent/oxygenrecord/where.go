// Code generated by entc, DO NOT EDIT.

package oxygenrecord

import (
	"opencensus/core/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TotalCylinders applies equality check predicate on the "totalCylinders" field. It's identical to TotalCylindersEQ.
func TotalCylinders(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCylinders), v))
	})
}

// TotalOwnCylinders applies equality check predicate on the "totalOwnCylinders" field. It's identical to TotalOwnCylindersEQ.
func TotalOwnCylinders(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalOwnCylinders), v))
	})
}

// TotalCylindersEQ applies the EQ predicate on the "totalCylinders" field.
func TotalCylindersEQ(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCylinders), v))
	})
}

// TotalCylindersNEQ applies the NEQ predicate on the "totalCylinders" field.
func TotalCylindersNEQ(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalCylinders), v))
	})
}

// TotalCylindersIn applies the In predicate on the "totalCylinders" field.
func TotalCylindersIn(vs ...int) predicate.OxygenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OxygenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalCylinders), v...))
	})
}

// TotalCylindersNotIn applies the NotIn predicate on the "totalCylinders" field.
func TotalCylindersNotIn(vs ...int) predicate.OxygenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OxygenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalCylinders), v...))
	})
}

// TotalCylindersGT applies the GT predicate on the "totalCylinders" field.
func TotalCylindersGT(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalCylinders), v))
	})
}

// TotalCylindersGTE applies the GTE predicate on the "totalCylinders" field.
func TotalCylindersGTE(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalCylinders), v))
	})
}

// TotalCylindersLT applies the LT predicate on the "totalCylinders" field.
func TotalCylindersLT(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalCylinders), v))
	})
}

// TotalCylindersLTE applies the LTE predicate on the "totalCylinders" field.
func TotalCylindersLTE(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalCylinders), v))
	})
}

// TotalOwnCylindersEQ applies the EQ predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersEQ(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalOwnCylinders), v))
	})
}

// TotalOwnCylindersNEQ applies the NEQ predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersNEQ(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalOwnCylinders), v))
	})
}

// TotalOwnCylindersIn applies the In predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersIn(vs ...int) predicate.OxygenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OxygenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalOwnCylinders), v...))
	})
}

// TotalOwnCylindersNotIn applies the NotIn predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersNotIn(vs ...int) predicate.OxygenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OxygenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalOwnCylinders), v...))
	})
}

// TotalOwnCylindersGT applies the GT predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersGT(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalOwnCylinders), v))
	})
}

// TotalOwnCylindersGTE applies the GTE predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersGTE(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalOwnCylinders), v))
	})
}

// TotalOwnCylindersLT applies the LT predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersLT(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalOwnCylinders), v))
	})
}

// TotalOwnCylindersLTE applies the LTE predicate on the "totalOwnCylinders" field.
func TotalOwnCylindersLTE(v int) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalOwnCylinders), v))
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrganizationTable, OrganizationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrganizationTable, OrganizationPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OxygenRecord) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OxygenRecord) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OxygenRecord) predicate.OxygenRecord {
	return predicate.OxygenRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
