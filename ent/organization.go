// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/organization"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Ubigeo holds the value of the "ubigeo" field.
	Ubigeo string `json:"ubigeo,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// CovidZone holds the value of the "covidZone" field.
	CovidZone bool `json:"covidZone,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges OrganizationEdges `json:"edges"`
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Region holds the value of the region edge.
	Region []*Region `json:"region,omitempty"`
	// Province holds the value of the province edge.
	Province []*Province `json:"province,omitempty"`
	// District holds the value of the district edge.
	District []*District `json:"district,omitempty"`
	// OxygenRecords holds the value of the oxygenRecords edge.
	OxygenRecords []*OxygenRecord `json:"oxygenRecords,omitempty"`
	// BedRecords holds the value of the bedRecords edge.
	BedRecords []*BedRecord `json:"bedRecords,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) RegionOrErr() ([]*Region, error) {
	if e.loadedTypes[0] {
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// ProvinceOrErr returns the Province value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ProvinceOrErr() ([]*Province, error) {
	if e.loadedTypes[1] {
		return e.Province, nil
	}
	return nil, &NotLoadedError{edge: "province"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) DistrictOrErr() ([]*District, error) {
	if e.loadedTypes[2] {
		return e.District, nil
	}
	return nil, &NotLoadedError{edge: "district"}
}

// OxygenRecordsOrErr returns the OxygenRecords value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OxygenRecordsOrErr() ([]*OxygenRecord, error) {
	if e.loadedTypes[3] {
		return e.OxygenRecords, nil
	}
	return nil, &NotLoadedError{edge: "oxygenRecords"}
}

// BedRecordsOrErr returns the BedRecords value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) BedRecordsOrErr() ([]*BedRecord, error) {
	if e.loadedTypes[4] {
		return e.BedRecords, nil
	}
	return nil, &NotLoadedError{edge: "bedRecords"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldCovidZone:
			values[i] = &sql.NullBool{}
		case organization.FieldID:
			values[i] = &sql.NullInt64{}
		case organization.FieldName, organization.FieldCode, organization.FieldUbigeo, organization.FieldKind, organization.FieldCategory:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Organization", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case organization.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				o.Code = value.String
			}
		case organization.FieldUbigeo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ubigeo", values[i])
			} else if value.Valid {
				o.Ubigeo = value.String
			}
		case organization.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				o.Kind = value.String
			}
		case organization.FieldCovidZone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field covidZone", values[i])
			} else if value.Valid {
				o.CovidZone = value.Bool
			}
		case organization.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				o.Category = value.String
			}
		}
	}
	return nil
}

// QueryRegion queries the "region" edge of the Organization entity.
func (o *Organization) QueryRegion() *RegionQuery {
	return (&OrganizationClient{config: o.config}).QueryRegion(o)
}

// QueryProvince queries the "province" edge of the Organization entity.
func (o *Organization) QueryProvince() *ProvinceQuery {
	return (&OrganizationClient{config: o.config}).QueryProvince(o)
}

// QueryDistrict queries the "district" edge of the Organization entity.
func (o *Organization) QueryDistrict() *DistrictQuery {
	return (&OrganizationClient{config: o.config}).QueryDistrict(o)
}

// QueryOxygenRecords queries the "oxygenRecords" edge of the Organization entity.
func (o *Organization) QueryOxygenRecords() *OxygenRecordQuery {
	return (&OrganizationClient{config: o.config}).QueryOxygenRecords(o)
}

// QueryBedRecords queries the "bedRecords" edge of the Organization entity.
func (o *Organization) QueryBedRecords() *BedRecordQuery {
	return (&OrganizationClient{config: o.config}).QueryBedRecords(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return (&OrganizationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", name=")
	builder.WriteString(o.Name)
	builder.WriteString(", code=")
	builder.WriteString(o.Code)
	builder.WriteString(", ubigeo=")
	builder.WriteString(o.Ubigeo)
	builder.WriteString(", kind=")
	builder.WriteString(o.Kind)
	builder.WriteString(", covidZone=")
	builder.WriteString(fmt.Sprintf("%v", o.CovidZone))
	builder.WriteString(", category=")
	builder.WriteString(o.Category)
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization

func (o Organizations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
