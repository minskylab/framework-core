// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"opencensus/core/ent/district"
	"opencensus/core/ent/occurency"
	"opencensus/core/ent/predicate"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OccurencyUpdate is the builder for updating Occurency entities.
type OccurencyUpdate struct {
	config
	hooks    []Hook
	mutation *OccurencyMutation
}

// Where adds a new predicate for the OccurencyUpdate builder.
func (ou *OccurencyUpdate) Where(ps ...predicate.Occurency) *OccurencyUpdate {
	ou.mutation.predicates = append(ou.mutation.predicates, ps...)
	return ou
}

// SetUUID sets the "uuid" field.
func (ou *OccurencyUpdate) SetUUID(s string) *OccurencyUpdate {
	ou.mutation.SetUUID(s)
	return ou
}

// SetReportedRecord sets the "reportedRecord" field.
func (ou *OccurencyUpdate) SetReportedRecord(t time.Time) *OccurencyUpdate {
	ou.mutation.SetReportedRecord(t)
	return ou
}

// SetResultDate sets the "resultDate" field.
func (ou *OccurencyUpdate) SetResultDate(t time.Time) *OccurencyUpdate {
	ou.mutation.SetResultDate(t)
	return ou
}

// SetBiologicalSex sets the "biologicalSex" field.
func (ou *OccurencyUpdate) SetBiologicalSex(s string) *OccurencyUpdate {
	ou.mutation.SetBiologicalSex(s)
	return ou
}

// SetAge sets the "age" field.
func (ou *OccurencyUpdate) SetAge(i int) *OccurencyUpdate {
	ou.mutation.ResetAge()
	ou.mutation.SetAge(i)
	return ou
}

// AddAge adds i to the "age" field.
func (ou *OccurencyUpdate) AddAge(i int) *OccurencyUpdate {
	ou.mutation.AddAge(i)
	return ou
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (ou *OccurencyUpdate) SetRegionID(id int) *OccurencyUpdate {
	ou.mutation.SetRegionID(id)
	return ou
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (ou *OccurencyUpdate) SetNillableRegionID(id *int) *OccurencyUpdate {
	if id != nil {
		ou = ou.SetRegionID(*id)
	}
	return ou
}

// SetRegion sets the "region" edge to the Region entity.
func (ou *OccurencyUpdate) SetRegion(r *Region) *OccurencyUpdate {
	return ou.SetRegionID(r.ID)
}

// SetProvinceID sets the "province" edge to the Province entity by ID.
func (ou *OccurencyUpdate) SetProvinceID(id int) *OccurencyUpdate {
	ou.mutation.SetProvinceID(id)
	return ou
}

// SetNillableProvinceID sets the "province" edge to the Province entity by ID if the given value is not nil.
func (ou *OccurencyUpdate) SetNillableProvinceID(id *int) *OccurencyUpdate {
	if id != nil {
		ou = ou.SetProvinceID(*id)
	}
	return ou
}

// SetProvince sets the "province" edge to the Province entity.
func (ou *OccurencyUpdate) SetProvince(p *Province) *OccurencyUpdate {
	return ou.SetProvinceID(p.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (ou *OccurencyUpdate) SetDistrictID(id int) *OccurencyUpdate {
	ou.mutation.SetDistrictID(id)
	return ou
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (ou *OccurencyUpdate) SetNillableDistrictID(id *int) *OccurencyUpdate {
	if id != nil {
		ou = ou.SetDistrictID(*id)
	}
	return ou
}

// SetDistrict sets the "district" edge to the District entity.
func (ou *OccurencyUpdate) SetDistrict(d *District) *OccurencyUpdate {
	return ou.SetDistrictID(d.ID)
}

// Mutation returns the OccurencyMutation object of the builder.
func (ou *OccurencyUpdate) Mutation() *OccurencyMutation {
	return ou.mutation
}

// ClearRegion clears the "region" edge to the Region entity.
func (ou *OccurencyUpdate) ClearRegion() *OccurencyUpdate {
	ou.mutation.ClearRegion()
	return ou
}

// ClearProvince clears the "province" edge to the Province entity.
func (ou *OccurencyUpdate) ClearProvince() *OccurencyUpdate {
	ou.mutation.ClearProvince()
	return ou
}

// ClearDistrict clears the "district" edge to the District entity.
func (ou *OccurencyUpdate) ClearDistrict() *OccurencyUpdate {
	ou.mutation.ClearDistrict()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OccurencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OccurencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OccurencyUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OccurencyUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OccurencyUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OccurencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   occurency.Table,
			Columns: occurency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: occurency.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: occurency.FieldUUID,
		})
	}
	if value, ok := ou.mutation.ReportedRecord(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: occurency.FieldReportedRecord,
		})
	}
	if value, ok := ou.mutation.ResultDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: occurency.FieldResultDate,
		})
	}
	if value, ok := ou.mutation.BiologicalSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: occurency.FieldBiologicalSex,
		})
	}
	if value, ok := ou.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: occurency.FieldAge,
		})
	}
	if value, ok := ou.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: occurency.FieldAge,
		})
	}
	if ou.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.RegionTable,
			Columns: []string{occurency.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.RegionTable,
			Columns: []string{occurency.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.ProvinceTable,
			Columns: []string{occurency.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.ProvinceTable,
			Columns: []string{occurency.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.DistrictTable,
			Columns: []string{occurency.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.DistrictTable,
			Columns: []string{occurency.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{occurency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OccurencyUpdateOne is the builder for updating a single Occurency entity.
type OccurencyUpdateOne struct {
	config
	hooks    []Hook
	mutation *OccurencyMutation
}

// SetUUID sets the "uuid" field.
func (ouo *OccurencyUpdateOne) SetUUID(s string) *OccurencyUpdateOne {
	ouo.mutation.SetUUID(s)
	return ouo
}

// SetReportedRecord sets the "reportedRecord" field.
func (ouo *OccurencyUpdateOne) SetReportedRecord(t time.Time) *OccurencyUpdateOne {
	ouo.mutation.SetReportedRecord(t)
	return ouo
}

// SetResultDate sets the "resultDate" field.
func (ouo *OccurencyUpdateOne) SetResultDate(t time.Time) *OccurencyUpdateOne {
	ouo.mutation.SetResultDate(t)
	return ouo
}

// SetBiologicalSex sets the "biologicalSex" field.
func (ouo *OccurencyUpdateOne) SetBiologicalSex(s string) *OccurencyUpdateOne {
	ouo.mutation.SetBiologicalSex(s)
	return ouo
}

// SetAge sets the "age" field.
func (ouo *OccurencyUpdateOne) SetAge(i int) *OccurencyUpdateOne {
	ouo.mutation.ResetAge()
	ouo.mutation.SetAge(i)
	return ouo
}

// AddAge adds i to the "age" field.
func (ouo *OccurencyUpdateOne) AddAge(i int) *OccurencyUpdateOne {
	ouo.mutation.AddAge(i)
	return ouo
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (ouo *OccurencyUpdateOne) SetRegionID(id int) *OccurencyUpdateOne {
	ouo.mutation.SetRegionID(id)
	return ouo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (ouo *OccurencyUpdateOne) SetNillableRegionID(id *int) *OccurencyUpdateOne {
	if id != nil {
		ouo = ouo.SetRegionID(*id)
	}
	return ouo
}

// SetRegion sets the "region" edge to the Region entity.
func (ouo *OccurencyUpdateOne) SetRegion(r *Region) *OccurencyUpdateOne {
	return ouo.SetRegionID(r.ID)
}

// SetProvinceID sets the "province" edge to the Province entity by ID.
func (ouo *OccurencyUpdateOne) SetProvinceID(id int) *OccurencyUpdateOne {
	ouo.mutation.SetProvinceID(id)
	return ouo
}

// SetNillableProvinceID sets the "province" edge to the Province entity by ID if the given value is not nil.
func (ouo *OccurencyUpdateOne) SetNillableProvinceID(id *int) *OccurencyUpdateOne {
	if id != nil {
		ouo = ouo.SetProvinceID(*id)
	}
	return ouo
}

// SetProvince sets the "province" edge to the Province entity.
func (ouo *OccurencyUpdateOne) SetProvince(p *Province) *OccurencyUpdateOne {
	return ouo.SetProvinceID(p.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (ouo *OccurencyUpdateOne) SetDistrictID(id int) *OccurencyUpdateOne {
	ouo.mutation.SetDistrictID(id)
	return ouo
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (ouo *OccurencyUpdateOne) SetNillableDistrictID(id *int) *OccurencyUpdateOne {
	if id != nil {
		ouo = ouo.SetDistrictID(*id)
	}
	return ouo
}

// SetDistrict sets the "district" edge to the District entity.
func (ouo *OccurencyUpdateOne) SetDistrict(d *District) *OccurencyUpdateOne {
	return ouo.SetDistrictID(d.ID)
}

// Mutation returns the OccurencyMutation object of the builder.
func (ouo *OccurencyUpdateOne) Mutation() *OccurencyMutation {
	return ouo.mutation
}

// ClearRegion clears the "region" edge to the Region entity.
func (ouo *OccurencyUpdateOne) ClearRegion() *OccurencyUpdateOne {
	ouo.mutation.ClearRegion()
	return ouo
}

// ClearProvince clears the "province" edge to the Province entity.
func (ouo *OccurencyUpdateOne) ClearProvince() *OccurencyUpdateOne {
	ouo.mutation.ClearProvince()
	return ouo
}

// ClearDistrict clears the "district" edge to the District entity.
func (ouo *OccurencyUpdateOne) ClearDistrict() *OccurencyUpdateOne {
	ouo.mutation.ClearDistrict()
	return ouo
}

// Save executes the query and returns the updated Occurency entity.
func (ouo *OccurencyUpdateOne) Save(ctx context.Context) (*Occurency, error) {
	var (
		err  error
		node *Occurency
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OccurencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OccurencyUpdateOne) SaveX(ctx context.Context) *Occurency {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OccurencyUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OccurencyUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OccurencyUpdateOne) sqlSave(ctx context.Context) (_node *Occurency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   occurency.Table,
			Columns: occurency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: occurency.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Occurency.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: occurency.FieldUUID,
		})
	}
	if value, ok := ouo.mutation.ReportedRecord(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: occurency.FieldReportedRecord,
		})
	}
	if value, ok := ouo.mutation.ResultDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: occurency.FieldResultDate,
		})
	}
	if value, ok := ouo.mutation.BiologicalSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: occurency.FieldBiologicalSex,
		})
	}
	if value, ok := ouo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: occurency.FieldAge,
		})
	}
	if value, ok := ouo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: occurency.FieldAge,
		})
	}
	if ouo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.RegionTable,
			Columns: []string{occurency.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.RegionTable,
			Columns: []string{occurency.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.ProvinceTable,
			Columns: []string{occurency.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.ProvinceTable,
			Columns: []string{occurency.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.DistrictTable,
			Columns: []string{occurency.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurency.DistrictTable,
			Columns: []string{occurency.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Occurency{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{occurency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
