// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"opencensus/core/ent/district"
	"opencensus/core/ent/organization"
	"opencensus/core/ent/predicate"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProvinceUpdate is the builder for updating Province entities.
type ProvinceUpdate struct {
	config
	hooks    []Hook
	mutation *ProvinceMutation
}

// Where adds a new predicate for the ProvinceUpdate builder.
func (pu *ProvinceUpdate) Where(ps ...predicate.Province) *ProvinceUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProvinceUpdate) SetName(s string) *ProvinceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (pu *ProvinceUpdate) AddOrganizationIDs(ids ...int) *ProvinceUpdate {
	pu.mutation.AddOrganizationIDs(ids...)
	return pu
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (pu *ProvinceUpdate) AddOrganization(o ...*Organization) *ProvinceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrganizationIDs(ids...)
}

// AddRegionIDs adds the "region" edge to the Region entity by IDs.
func (pu *ProvinceUpdate) AddRegionIDs(ids ...int) *ProvinceUpdate {
	pu.mutation.AddRegionIDs(ids...)
	return pu
}

// AddRegion adds the "region" edges to the Region entity.
func (pu *ProvinceUpdate) AddRegion(r ...*Region) *ProvinceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRegionIDs(ids...)
}

// AddDistrictIDs adds the "district" edge to the District entity by IDs.
func (pu *ProvinceUpdate) AddDistrictIDs(ids ...int) *ProvinceUpdate {
	pu.mutation.AddDistrictIDs(ids...)
	return pu
}

// AddDistrict adds the "district" edges to the District entity.
func (pu *ProvinceUpdate) AddDistrict(d ...*District) *ProvinceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDistrictIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (pu *ProvinceUpdate) Mutation() *ProvinceMutation {
	return pu.mutation
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (pu *ProvinceUpdate) ClearOrganization() *ProvinceUpdate {
	pu.mutation.ClearOrganization()
	return pu
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (pu *ProvinceUpdate) RemoveOrganizationIDs(ids ...int) *ProvinceUpdate {
	pu.mutation.RemoveOrganizationIDs(ids...)
	return pu
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (pu *ProvinceUpdate) RemoveOrganization(o ...*Organization) *ProvinceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrganizationIDs(ids...)
}

// ClearRegion clears all "region" edges to the Region entity.
func (pu *ProvinceUpdate) ClearRegion() *ProvinceUpdate {
	pu.mutation.ClearRegion()
	return pu
}

// RemoveRegionIDs removes the "region" edge to Region entities by IDs.
func (pu *ProvinceUpdate) RemoveRegionIDs(ids ...int) *ProvinceUpdate {
	pu.mutation.RemoveRegionIDs(ids...)
	return pu
}

// RemoveRegion removes "region" edges to Region entities.
func (pu *ProvinceUpdate) RemoveRegion(r ...*Region) *ProvinceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRegionIDs(ids...)
}

// ClearDistrict clears all "district" edges to the District entity.
func (pu *ProvinceUpdate) ClearDistrict() *ProvinceUpdate {
	pu.mutation.ClearDistrict()
	return pu
}

// RemoveDistrictIDs removes the "district" edge to District entities by IDs.
func (pu *ProvinceUpdate) RemoveDistrictIDs(ids ...int) *ProvinceUpdate {
	pu.mutation.RemoveDistrictIDs(ids...)
	return pu
}

// RemoveDistrict removes "district" edges to District entities.
func (pu *ProvinceUpdate) RemoveDistrict(d ...*District) *ProvinceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDistrictIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProvinceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvinceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProvinceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProvinceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProvinceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProvinceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   province.Table,
			Columns: province.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: province.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: province.FieldName,
		})
	}
	if pu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.OrganizationTable,
			Columns: province.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !pu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.OrganizationTable,
			Columns: province.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.OrganizationTable,
			Columns: province.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.RegionTable,
			Columns: province.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRegionIDs(); len(nodes) > 0 && !pu.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.RegionTable,
			Columns: province.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.RegionTable,
			Columns: province.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   province.DistrictTable,
			Columns: province.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDistrictIDs(); len(nodes) > 0 && !pu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   province.DistrictTable,
			Columns: province.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   province.DistrictTable,
			Columns: province.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{province.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProvinceUpdateOne is the builder for updating a single Province entity.
type ProvinceUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProvinceMutation
}

// SetName sets the "name" field.
func (puo *ProvinceUpdateOne) SetName(s string) *ProvinceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (puo *ProvinceUpdateOne) AddOrganizationIDs(ids ...int) *ProvinceUpdateOne {
	puo.mutation.AddOrganizationIDs(ids...)
	return puo
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (puo *ProvinceUpdateOne) AddOrganization(o ...*Organization) *ProvinceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrganizationIDs(ids...)
}

// AddRegionIDs adds the "region" edge to the Region entity by IDs.
func (puo *ProvinceUpdateOne) AddRegionIDs(ids ...int) *ProvinceUpdateOne {
	puo.mutation.AddRegionIDs(ids...)
	return puo
}

// AddRegion adds the "region" edges to the Region entity.
func (puo *ProvinceUpdateOne) AddRegion(r ...*Region) *ProvinceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRegionIDs(ids...)
}

// AddDistrictIDs adds the "district" edge to the District entity by IDs.
func (puo *ProvinceUpdateOne) AddDistrictIDs(ids ...int) *ProvinceUpdateOne {
	puo.mutation.AddDistrictIDs(ids...)
	return puo
}

// AddDistrict adds the "district" edges to the District entity.
func (puo *ProvinceUpdateOne) AddDistrict(d ...*District) *ProvinceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDistrictIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (puo *ProvinceUpdateOne) Mutation() *ProvinceMutation {
	return puo.mutation
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (puo *ProvinceUpdateOne) ClearOrganization() *ProvinceUpdateOne {
	puo.mutation.ClearOrganization()
	return puo
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (puo *ProvinceUpdateOne) RemoveOrganizationIDs(ids ...int) *ProvinceUpdateOne {
	puo.mutation.RemoveOrganizationIDs(ids...)
	return puo
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (puo *ProvinceUpdateOne) RemoveOrganization(o ...*Organization) *ProvinceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrganizationIDs(ids...)
}

// ClearRegion clears all "region" edges to the Region entity.
func (puo *ProvinceUpdateOne) ClearRegion() *ProvinceUpdateOne {
	puo.mutation.ClearRegion()
	return puo
}

// RemoveRegionIDs removes the "region" edge to Region entities by IDs.
func (puo *ProvinceUpdateOne) RemoveRegionIDs(ids ...int) *ProvinceUpdateOne {
	puo.mutation.RemoveRegionIDs(ids...)
	return puo
}

// RemoveRegion removes "region" edges to Region entities.
func (puo *ProvinceUpdateOne) RemoveRegion(r ...*Region) *ProvinceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRegionIDs(ids...)
}

// ClearDistrict clears all "district" edges to the District entity.
func (puo *ProvinceUpdateOne) ClearDistrict() *ProvinceUpdateOne {
	puo.mutation.ClearDistrict()
	return puo
}

// RemoveDistrictIDs removes the "district" edge to District entities by IDs.
func (puo *ProvinceUpdateOne) RemoveDistrictIDs(ids ...int) *ProvinceUpdateOne {
	puo.mutation.RemoveDistrictIDs(ids...)
	return puo
}

// RemoveDistrict removes "district" edges to District entities.
func (puo *ProvinceUpdateOne) RemoveDistrict(d ...*District) *ProvinceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDistrictIDs(ids...)
}

// Save executes the query and returns the updated Province entity.
func (puo *ProvinceUpdateOne) Save(ctx context.Context) (*Province, error) {
	var (
		err  error
		node *Province
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvinceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProvinceUpdateOne) SaveX(ctx context.Context) *Province {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProvinceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProvinceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProvinceUpdateOne) sqlSave(ctx context.Context) (_node *Province, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   province.Table,
			Columns: province.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: province.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Province.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: province.FieldName,
		})
	}
	if puo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.OrganizationTable,
			Columns: province.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !puo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.OrganizationTable,
			Columns: province.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.OrganizationTable,
			Columns: province.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.RegionTable,
			Columns: province.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRegionIDs(); len(nodes) > 0 && !puo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.RegionTable,
			Columns: province.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   province.RegionTable,
			Columns: province.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   province.DistrictTable,
			Columns: province.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDistrictIDs(); len(nodes) > 0 && !puo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   province.DistrictTable,
			Columns: province.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   province.DistrictTable,
			Columns: province.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Province{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{province.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
