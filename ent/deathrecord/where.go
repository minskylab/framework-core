// Code generated by entc, DO NOT EDIT.

package deathrecord

import (
	"opencensus/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ReportedDate applies equality check predicate on the "reportedDate" field. It's identical to ReportedDateEQ.
func ReportedDate(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportedDate), v))
	})
}

// CollectedDate applies equality check predicate on the "collectedDate" field. It's identical to CollectedDateEQ.
func CollectedDate(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedDate), v))
	})
}

// SinadefRegisters applies equality check predicate on the "sinadefRegisters" field. It's identical to SinadefRegistersEQ.
func SinadefRegisters(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSinadefRegisters), v))
	})
}

// MinsaRegisters applies equality check predicate on the "minsaRegisters" field. It's identical to MinsaRegistersEQ.
func MinsaRegisters(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinsaRegisters), v))
	})
}

// ReportedDateEQ applies the EQ predicate on the "reportedDate" field.
func ReportedDateEQ(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportedDate), v))
	})
}

// ReportedDateNEQ applies the NEQ predicate on the "reportedDate" field.
func ReportedDateNEQ(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportedDate), v))
	})
}

// ReportedDateIn applies the In predicate on the "reportedDate" field.
func ReportedDateIn(vs ...time.Time) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportedDate), v...))
	})
}

// ReportedDateNotIn applies the NotIn predicate on the "reportedDate" field.
func ReportedDateNotIn(vs ...time.Time) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportedDate), v...))
	})
}

// ReportedDateGT applies the GT predicate on the "reportedDate" field.
func ReportedDateGT(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportedDate), v))
	})
}

// ReportedDateGTE applies the GTE predicate on the "reportedDate" field.
func ReportedDateGTE(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportedDate), v))
	})
}

// ReportedDateLT applies the LT predicate on the "reportedDate" field.
func ReportedDateLT(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportedDate), v))
	})
}

// ReportedDateLTE applies the LTE predicate on the "reportedDate" field.
func ReportedDateLTE(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportedDate), v))
	})
}

// CollectedDateEQ applies the EQ predicate on the "collectedDate" field.
func CollectedDateEQ(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateNEQ applies the NEQ predicate on the "collectedDate" field.
func CollectedDateNEQ(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateIn applies the In predicate on the "collectedDate" field.
func CollectedDateIn(vs ...time.Time) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectedDate), v...))
	})
}

// CollectedDateNotIn applies the NotIn predicate on the "collectedDate" field.
func CollectedDateNotIn(vs ...time.Time) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectedDate), v...))
	})
}

// CollectedDateGT applies the GT predicate on the "collectedDate" field.
func CollectedDateGT(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateGTE applies the GTE predicate on the "collectedDate" field.
func CollectedDateGTE(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateLT applies the LT predicate on the "collectedDate" field.
func CollectedDateLT(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateLTE applies the LTE predicate on the "collectedDate" field.
func CollectedDateLTE(v time.Time) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectedDate), v))
	})
}

// SinadefRegistersEQ applies the EQ predicate on the "sinadefRegisters" field.
func SinadefRegistersEQ(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSinadefRegisters), v))
	})
}

// SinadefRegistersNEQ applies the NEQ predicate on the "sinadefRegisters" field.
func SinadefRegistersNEQ(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSinadefRegisters), v))
	})
}

// SinadefRegistersIn applies the In predicate on the "sinadefRegisters" field.
func SinadefRegistersIn(vs ...int) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSinadefRegisters), v...))
	})
}

// SinadefRegistersNotIn applies the NotIn predicate on the "sinadefRegisters" field.
func SinadefRegistersNotIn(vs ...int) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSinadefRegisters), v...))
	})
}

// SinadefRegistersGT applies the GT predicate on the "sinadefRegisters" field.
func SinadefRegistersGT(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSinadefRegisters), v))
	})
}

// SinadefRegistersGTE applies the GTE predicate on the "sinadefRegisters" field.
func SinadefRegistersGTE(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSinadefRegisters), v))
	})
}

// SinadefRegistersLT applies the LT predicate on the "sinadefRegisters" field.
func SinadefRegistersLT(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSinadefRegisters), v))
	})
}

// SinadefRegistersLTE applies the LTE predicate on the "sinadefRegisters" field.
func SinadefRegistersLTE(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSinadefRegisters), v))
	})
}

// MinsaRegistersEQ applies the EQ predicate on the "minsaRegisters" field.
func MinsaRegistersEQ(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinsaRegisters), v))
	})
}

// MinsaRegistersNEQ applies the NEQ predicate on the "minsaRegisters" field.
func MinsaRegistersNEQ(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinsaRegisters), v))
	})
}

// MinsaRegistersIn applies the In predicate on the "minsaRegisters" field.
func MinsaRegistersIn(vs ...int) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinsaRegisters), v...))
	})
}

// MinsaRegistersNotIn applies the NotIn predicate on the "minsaRegisters" field.
func MinsaRegistersNotIn(vs ...int) predicate.DeathRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinsaRegisters), v...))
	})
}

// MinsaRegistersGT applies the GT predicate on the "minsaRegisters" field.
func MinsaRegistersGT(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinsaRegisters), v))
	})
}

// MinsaRegistersGTE applies the GTE predicate on the "minsaRegisters" field.
func MinsaRegistersGTE(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinsaRegisters), v))
	})
}

// MinsaRegistersLT applies the LT predicate on the "minsaRegisters" field.
func MinsaRegistersLT(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinsaRegisters), v))
	})
}

// MinsaRegistersLTE applies the LTE predicate on the "minsaRegisters" field.
func MinsaRegistersLTE(v int) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinsaRegisters), v))
	})
}

// HasPlaces applies the HasEdge predicate on the "places" edge.
func HasPlaces() predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlacesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PlacesTable, PlacesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacesWith applies the HasEdge predicate on the "places" edge with a given conditions (other predicates).
func HasPlacesWith(preds ...predicate.Place) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlacesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PlacesTable, PlacesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeathRecord) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeathRecord) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeathRecord) predicate.DeathRecord {
	return predicate.DeathRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
