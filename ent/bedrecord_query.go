// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/organization"
	"opencensus/core/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BedRecordQuery is the builder for querying BedRecord entities.
type BedRecordQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.BedRecord
	// eager-loading edges.
	withOrganization *OrganizationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BedRecordQuery builder.
func (brq *BedRecordQuery) Where(ps ...predicate.BedRecord) *BedRecordQuery {
	brq.predicates = append(brq.predicates, ps...)
	return brq
}

// Limit adds a limit step to the query.
func (brq *BedRecordQuery) Limit(limit int) *BedRecordQuery {
	brq.limit = &limit
	return brq
}

// Offset adds an offset step to the query.
func (brq *BedRecordQuery) Offset(offset int) *BedRecordQuery {
	brq.offset = &offset
	return brq
}

// Order adds an order step to the query.
func (brq *BedRecordQuery) Order(o ...OrderFunc) *BedRecordQuery {
	brq.order = append(brq.order, o...)
	return brq
}

// QueryOrganization chains the current query on the "organization" edge.
func (brq *BedRecordQuery) QueryOrganization() *OrganizationQuery {
	query := &OrganizationQuery{config: brq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := brq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := brq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bedrecord.Table, bedrecord.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, bedrecord.OrganizationTable, bedrecord.OrganizationPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(brq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BedRecord entity from the query.
// Returns a *NotFoundError when no BedRecord was found.
func (brq *BedRecordQuery) First(ctx context.Context) (*BedRecord, error) {
	nodes, err := brq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bedrecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (brq *BedRecordQuery) FirstX(ctx context.Context) *BedRecord {
	node, err := brq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BedRecord ID from the query.
// Returns a *NotFoundError when no BedRecord ID was found.
func (brq *BedRecordQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = brq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bedrecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (brq *BedRecordQuery) FirstIDX(ctx context.Context) int {
	id, err := brq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BedRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one BedRecord entity is not found.
// Returns a *NotFoundError when no BedRecord entities are found.
func (brq *BedRecordQuery) Only(ctx context.Context) (*BedRecord, error) {
	nodes, err := brq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bedrecord.Label}
	default:
		return nil, &NotSingularError{bedrecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (brq *BedRecordQuery) OnlyX(ctx context.Context) *BedRecord {
	node, err := brq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BedRecord ID in the query.
// Returns a *NotSingularError when exactly one BedRecord ID is not found.
// Returns a *NotFoundError when no entities are found.
func (brq *BedRecordQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = brq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = &NotSingularError{bedrecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (brq *BedRecordQuery) OnlyIDX(ctx context.Context) int {
	id, err := brq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BedRecords.
func (brq *BedRecordQuery) All(ctx context.Context) ([]*BedRecord, error) {
	if err := brq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return brq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (brq *BedRecordQuery) AllX(ctx context.Context) []*BedRecord {
	nodes, err := brq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BedRecord IDs.
func (brq *BedRecordQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := brq.Select(bedrecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (brq *BedRecordQuery) IDsX(ctx context.Context) []int {
	ids, err := brq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (brq *BedRecordQuery) Count(ctx context.Context) (int, error) {
	if err := brq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return brq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (brq *BedRecordQuery) CountX(ctx context.Context) int {
	count, err := brq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (brq *BedRecordQuery) Exist(ctx context.Context) (bool, error) {
	if err := brq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return brq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (brq *BedRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := brq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BedRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (brq *BedRecordQuery) Clone() *BedRecordQuery {
	if brq == nil {
		return nil
	}
	return &BedRecordQuery{
		config:           brq.config,
		limit:            brq.limit,
		offset:           brq.offset,
		order:            append([]OrderFunc{}, brq.order...),
		predicates:       append([]predicate.BedRecord{}, brq.predicates...),
		withOrganization: brq.withOrganization.Clone(),
		// clone intermediate query.
		sql:  brq.sql.Clone(),
		path: brq.path,
	}
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (brq *BedRecordQuery) WithOrganization(opts ...func(*OrganizationQuery)) *BedRecordQuery {
	query := &OrganizationQuery{config: brq.config}
	for _, opt := range opts {
		opt(query)
	}
	brq.withOrganization = query
	return brq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BusyCovidBeds int `json:"busyCovidBeds,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BedRecord.Query().
//		GroupBy(bedrecord.FieldBusyCovidBeds).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (brq *BedRecordQuery) GroupBy(field string, fields ...string) *BedRecordGroupBy {
	group := &BedRecordGroupBy{config: brq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := brq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return brq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BusyCovidBeds int `json:"busyCovidBeds,omitempty"`
//	}
//
//	client.BedRecord.Query().
//		Select(bedrecord.FieldBusyCovidBeds).
//		Scan(ctx, &v)
//
func (brq *BedRecordQuery) Select(field string, fields ...string) *BedRecordSelect {
	brq.fields = append([]string{field}, fields...)
	return &BedRecordSelect{BedRecordQuery: brq}
}

func (brq *BedRecordQuery) prepareQuery(ctx context.Context) error {
	for _, f := range brq.fields {
		if !bedrecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if brq.path != nil {
		prev, err := brq.path(ctx)
		if err != nil {
			return err
		}
		brq.sql = prev
	}
	return nil
}

func (brq *BedRecordQuery) sqlAll(ctx context.Context) ([]*BedRecord, error) {
	var (
		nodes       = []*BedRecord{}
		_spec       = brq.querySpec()
		loadedTypes = [1]bool{
			brq.withOrganization != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &BedRecord{config: brq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, brq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := brq.withOrganization; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*BedRecord, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Organization = []*Organization{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*BedRecord)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   bedrecord.OrganizationTable,
				Columns: bedrecord.OrganizationPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(bedrecord.OrganizationPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, brq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "organization": %v`, err)
		}
		query.Where(organization.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "organization" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Organization = append(nodes[i].Edges.Organization, n)
			}
		}
	}

	return nodes, nil
}

func (brq *BedRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := brq.querySpec()
	return sqlgraph.CountNodes(ctx, brq.driver, _spec)
}

func (brq *BedRecordQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := brq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (brq *BedRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bedrecord.Table,
			Columns: bedrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bedrecord.FieldID,
			},
		},
		From:   brq.sql,
		Unique: true,
	}
	if fields := brq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bedrecord.FieldID)
		for i := range fields {
			if fields[i] != bedrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := brq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := brq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := brq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := brq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, bedrecord.ValidColumn)
			}
		}
	}
	return _spec
}

func (brq *BedRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(brq.driver.Dialect())
	t1 := builder.Table(bedrecord.Table)
	selector := builder.Select(t1.Columns(bedrecord.Columns...)...).From(t1)
	if brq.sql != nil {
		selector = brq.sql
		selector.Select(selector.Columns(bedrecord.Columns...)...)
	}
	for _, p := range brq.predicates {
		p(selector)
	}
	for _, p := range brq.order {
		p(selector, bedrecord.ValidColumn)
	}
	if offset := brq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := brq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BedRecordGroupBy is the group-by builder for BedRecord entities.
type BedRecordGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (brgb *BedRecordGroupBy) Aggregate(fns ...AggregateFunc) *BedRecordGroupBy {
	brgb.fns = append(brgb.fns, fns...)
	return brgb
}

// Scan applies the group-by query and scans the result into the given value.
func (brgb *BedRecordGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := brgb.path(ctx)
	if err != nil {
		return err
	}
	brgb.sql = query
	return brgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (brgb *BedRecordGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := brgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(brgb.fields) > 1 {
		return nil, errors.New("ent: BedRecordGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := brgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (brgb *BedRecordGroupBy) StringsX(ctx context.Context) []string {
	v, err := brgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = brgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (brgb *BedRecordGroupBy) StringX(ctx context.Context) string {
	v, err := brgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(brgb.fields) > 1 {
		return nil, errors.New("ent: BedRecordGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := brgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (brgb *BedRecordGroupBy) IntsX(ctx context.Context) []int {
	v, err := brgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = brgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (brgb *BedRecordGroupBy) IntX(ctx context.Context) int {
	v, err := brgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(brgb.fields) > 1 {
		return nil, errors.New("ent: BedRecordGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := brgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (brgb *BedRecordGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := brgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = brgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (brgb *BedRecordGroupBy) Float64X(ctx context.Context) float64 {
	v, err := brgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(brgb.fields) > 1 {
		return nil, errors.New("ent: BedRecordGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := brgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (brgb *BedRecordGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := brgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (brgb *BedRecordGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = brgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (brgb *BedRecordGroupBy) BoolX(ctx context.Context) bool {
	v, err := brgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (brgb *BedRecordGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range brgb.fields {
		if !bedrecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := brgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := brgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (brgb *BedRecordGroupBy) sqlQuery() *sql.Selector {
	selector := brgb.sql
	columns := make([]string, 0, len(brgb.fields)+len(brgb.fns))
	columns = append(columns, brgb.fields...)
	for _, fn := range brgb.fns {
		columns = append(columns, fn(selector, bedrecord.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(brgb.fields...)
}

// BedRecordSelect is the builder for selecting fields of BedRecord entities.
type BedRecordSelect struct {
	*BedRecordQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (brs *BedRecordSelect) Scan(ctx context.Context, v interface{}) error {
	if err := brs.prepareQuery(ctx); err != nil {
		return err
	}
	brs.sql = brs.BedRecordQuery.sqlQuery(ctx)
	return brs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (brs *BedRecordSelect) ScanX(ctx context.Context, v interface{}) {
	if err := brs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Strings(ctx context.Context) ([]string, error) {
	if len(brs.fields) > 1 {
		return nil, errors.New("ent: BedRecordSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := brs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (brs *BedRecordSelect) StringsX(ctx context.Context) []string {
	v, err := brs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = brs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (brs *BedRecordSelect) StringX(ctx context.Context) string {
	v, err := brs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Ints(ctx context.Context) ([]int, error) {
	if len(brs.fields) > 1 {
		return nil, errors.New("ent: BedRecordSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := brs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (brs *BedRecordSelect) IntsX(ctx context.Context) []int {
	v, err := brs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = brs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (brs *BedRecordSelect) IntX(ctx context.Context) int {
	v, err := brs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(brs.fields) > 1 {
		return nil, errors.New("ent: BedRecordSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := brs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (brs *BedRecordSelect) Float64sX(ctx context.Context) []float64 {
	v, err := brs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = brs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (brs *BedRecordSelect) Float64X(ctx context.Context) float64 {
	v, err := brs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(brs.fields) > 1 {
		return nil, errors.New("ent: BedRecordSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := brs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (brs *BedRecordSelect) BoolsX(ctx context.Context) []bool {
	v, err := brs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (brs *BedRecordSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = brs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bedrecord.Label}
	default:
		err = fmt.Errorf("ent: BedRecordSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (brs *BedRecordSelect) BoolX(ctx context.Context) bool {
	v, err := brs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (brs *BedRecordSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := brs.sqlQuery().Query()
	if err := brs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (brs *BedRecordSelect) sqlQuery() sql.Querier {
	selector := brs.sql
	selector.Select(selector.Columns(brs.fields...)...)
	return selector
}
