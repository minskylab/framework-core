// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/oxygenrecord"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OxygenRecord is the model entity for the OxygenRecord schema.
type OxygenRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReportedDate holds the value of the "reportedDate" field.
	ReportedDate time.Time `json:"reportedDate,omitempty"`
	// CollectedDate holds the value of the "collectedDate" field.
	CollectedDate time.Time `json:"collectedDate,omitempty"`
	// TotalCylinders holds the value of the "totalCylinders" field.
	TotalCylinders int `json:"totalCylinders,omitempty"`
	// TotalOwnCylinders holds the value of the "totalOwnCylinders" field.
	TotalOwnCylinders int `json:"totalOwnCylinders,omitempty"`
	// DailyProduction holds the value of the "dailyProduction" field.
	DailyProduction int `json:"dailyProduction,omitempty"`
	// MaxDailyProduction holds the value of the "maxDailyProduction" field.
	MaxDailyProduction int `json:"maxDailyProduction,omitempty"`
	// DailyConsumption holds the value of the "dailyConsumption" field.
	DailyConsumption int `json:"dailyConsumption,omitempty"`
	// MainSourceKind holds the value of the "mainSourceKind" field.
	MainSourceKind string `json:"mainSourceKind,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OxygenRecordQuery when eager-loading is set.
	Edges OxygenRecordEdges `json:"edges"`
}

// OxygenRecordEdges holds the relations/edges for other nodes in the graph.
type OxygenRecordEdges struct {
	// Places holds the value of the places edge.
	Places []*Place `json:"places,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlacesOrErr returns the Places value or an error if the edge
// was not loaded in eager-loading.
func (e OxygenRecordEdges) PlacesOrErr() ([]*Place, error) {
	if e.loadedTypes[0] {
		return e.Places, nil
	}
	return nil, &NotLoadedError{edge: "places"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OxygenRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case oxygenrecord.FieldID, oxygenrecord.FieldTotalCylinders, oxygenrecord.FieldTotalOwnCylinders, oxygenrecord.FieldDailyProduction, oxygenrecord.FieldMaxDailyProduction, oxygenrecord.FieldDailyConsumption:
			values[i] = &sql.NullInt64{}
		case oxygenrecord.FieldMainSourceKind:
			values[i] = &sql.NullString{}
		case oxygenrecord.FieldReportedDate, oxygenrecord.FieldCollectedDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type OxygenRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OxygenRecord fields.
func (or *OxygenRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oxygenrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			or.ID = int(value.Int64)
		case oxygenrecord.FieldReportedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reportedDate", values[i])
			} else if value.Valid {
				or.ReportedDate = value.Time
			}
		case oxygenrecord.FieldCollectedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field collectedDate", values[i])
			} else if value.Valid {
				or.CollectedDate = value.Time
			}
		case oxygenrecord.FieldTotalCylinders:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field totalCylinders", values[i])
			} else if value.Valid {
				or.TotalCylinders = int(value.Int64)
			}
		case oxygenrecord.FieldTotalOwnCylinders:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field totalOwnCylinders", values[i])
			} else if value.Valid {
				or.TotalOwnCylinders = int(value.Int64)
			}
		case oxygenrecord.FieldDailyProduction:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dailyProduction", values[i])
			} else if value.Valid {
				or.DailyProduction = int(value.Int64)
			}
		case oxygenrecord.FieldMaxDailyProduction:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maxDailyProduction", values[i])
			} else if value.Valid {
				or.MaxDailyProduction = int(value.Int64)
			}
		case oxygenrecord.FieldDailyConsumption:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dailyConsumption", values[i])
			} else if value.Valid {
				or.DailyConsumption = int(value.Int64)
			}
		case oxygenrecord.FieldMainSourceKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mainSourceKind", values[i])
			} else if value.Valid {
				or.MainSourceKind = value.String
			}
		}
	}
	return nil
}

// QueryPlaces queries the "places" edge of the OxygenRecord entity.
func (or *OxygenRecord) QueryPlaces() *PlaceQuery {
	return (&OxygenRecordClient{config: or.config}).QueryPlaces(or)
}

// Update returns a builder for updating this OxygenRecord.
// Note that you need to call OxygenRecord.Unwrap() before calling this method if this OxygenRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OxygenRecord) Update() *OxygenRecordUpdateOne {
	return (&OxygenRecordClient{config: or.config}).UpdateOne(or)
}

// Unwrap unwraps the OxygenRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OxygenRecord) Unwrap() *OxygenRecord {
	tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OxygenRecord is not a transactional entity")
	}
	or.config.driver = tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OxygenRecord) String() string {
	var builder strings.Builder
	builder.WriteString("OxygenRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", or.ID))
	builder.WriteString(", reportedDate=")
	builder.WriteString(or.ReportedDate.Format(time.ANSIC))
	builder.WriteString(", collectedDate=")
	builder.WriteString(or.CollectedDate.Format(time.ANSIC))
	builder.WriteString(", totalCylinders=")
	builder.WriteString(fmt.Sprintf("%v", or.TotalCylinders))
	builder.WriteString(", totalOwnCylinders=")
	builder.WriteString(fmt.Sprintf("%v", or.TotalOwnCylinders))
	builder.WriteString(", dailyProduction=")
	builder.WriteString(fmt.Sprintf("%v", or.DailyProduction))
	builder.WriteString(", maxDailyProduction=")
	builder.WriteString(fmt.Sprintf("%v", or.MaxDailyProduction))
	builder.WriteString(", dailyConsumption=")
	builder.WriteString(fmt.Sprintf("%v", or.DailyConsumption))
	builder.WriteString(", mainSourceKind=")
	builder.WriteString(or.MainSourceKind)
	builder.WriteByte(')')
	return builder.String()
}

// OxygenRecords is a parsable slice of OxygenRecord.
type OxygenRecords []*OxygenRecord

func (or OxygenRecords) config(cfg config) {
	for _i := range or {
		or[_i].config = cfg
	}
}
