// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/district"
	"opencensus/core/ent/organization"
	"opencensus/core/ent/oxygenrecord"
	"opencensus/core/ent/predicate"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where adds a new predicate for the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.predicates = append(ou.mutation.predicates, ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetCode sets the "code" field.
func (ou *OrganizationUpdate) SetCode(s string) *OrganizationUpdate {
	ou.mutation.SetCode(s)
	return ou
}

// SetUbigeo sets the "ubigeo" field.
func (ou *OrganizationUpdate) SetUbigeo(s string) *OrganizationUpdate {
	ou.mutation.SetUbigeo(s)
	return ou
}

// SetKind sets the "kind" field.
func (ou *OrganizationUpdate) SetKind(s string) *OrganizationUpdate {
	ou.mutation.SetKind(s)
	return ou
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableKind(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetKind(*s)
	}
	return ou
}

// ClearKind clears the value of the "kind" field.
func (ou *OrganizationUpdate) ClearKind() *OrganizationUpdate {
	ou.mutation.ClearKind()
	return ou
}

// SetCovidZone sets the "covidZone" field.
func (ou *OrganizationUpdate) SetCovidZone(b bool) *OrganizationUpdate {
	ou.mutation.SetCovidZone(b)
	return ou
}

// SetNillableCovidZone sets the "covidZone" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCovidZone(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetCovidZone(*b)
	}
	return ou
}

// ClearCovidZone clears the value of the "covidZone" field.
func (ou *OrganizationUpdate) ClearCovidZone() *OrganizationUpdate {
	ou.mutation.ClearCovidZone()
	return ou
}

// SetCategory sets the "category" field.
func (ou *OrganizationUpdate) SetCategory(s string) *OrganizationUpdate {
	ou.mutation.SetCategory(s)
	return ou
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCategory(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCategory(*s)
	}
	return ou
}

// ClearCategory clears the value of the "category" field.
func (ou *OrganizationUpdate) ClearCategory() *OrganizationUpdate {
	ou.mutation.ClearCategory()
	return ou
}

// AddRegionIDs adds the "region" edge to the Region entity by IDs.
func (ou *OrganizationUpdate) AddRegionIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddRegionIDs(ids...)
	return ou
}

// AddRegion adds the "region" edges to the Region entity.
func (ou *OrganizationUpdate) AddRegion(r ...*Region) *OrganizationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddRegionIDs(ids...)
}

// AddProvinceIDs adds the "province" edge to the Province entity by IDs.
func (ou *OrganizationUpdate) AddProvinceIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddProvinceIDs(ids...)
	return ou
}

// AddProvince adds the "province" edges to the Province entity.
func (ou *OrganizationUpdate) AddProvince(p ...*Province) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddProvinceIDs(ids...)
}

// AddDistrictIDs adds the "district" edge to the District entity by IDs.
func (ou *OrganizationUpdate) AddDistrictIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddDistrictIDs(ids...)
	return ou
}

// AddDistrict adds the "district" edges to the District entity.
func (ou *OrganizationUpdate) AddDistrict(d ...*District) *OrganizationUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.AddDistrictIDs(ids...)
}

// AddOxygenRecordIDs adds the "oxygenRecords" edge to the OxygenRecord entity by IDs.
func (ou *OrganizationUpdate) AddOxygenRecordIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddOxygenRecordIDs(ids...)
	return ou
}

// AddOxygenRecords adds the "oxygenRecords" edges to the OxygenRecord entity.
func (ou *OrganizationUpdate) AddOxygenRecords(o ...*OxygenRecord) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOxygenRecordIDs(ids...)
}

// AddBedRecordIDs adds the "bedRecords" edge to the BedRecord entity by IDs.
func (ou *OrganizationUpdate) AddBedRecordIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddBedRecordIDs(ids...)
	return ou
}

// AddBedRecords adds the "bedRecords" edges to the BedRecord entity.
func (ou *OrganizationUpdate) AddBedRecords(b ...*BedRecord) *OrganizationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.AddBedRecordIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearRegion clears all "region" edges to the Region entity.
func (ou *OrganizationUpdate) ClearRegion() *OrganizationUpdate {
	ou.mutation.ClearRegion()
	return ou
}

// RemoveRegionIDs removes the "region" edge to Region entities by IDs.
func (ou *OrganizationUpdate) RemoveRegionIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveRegionIDs(ids...)
	return ou
}

// RemoveRegion removes "region" edges to Region entities.
func (ou *OrganizationUpdate) RemoveRegion(r ...*Region) *OrganizationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveRegionIDs(ids...)
}

// ClearProvince clears all "province" edges to the Province entity.
func (ou *OrganizationUpdate) ClearProvince() *OrganizationUpdate {
	ou.mutation.ClearProvince()
	return ou
}

// RemoveProvinceIDs removes the "province" edge to Province entities by IDs.
func (ou *OrganizationUpdate) RemoveProvinceIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveProvinceIDs(ids...)
	return ou
}

// RemoveProvince removes "province" edges to Province entities.
func (ou *OrganizationUpdate) RemoveProvince(p ...*Province) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemoveProvinceIDs(ids...)
}

// ClearDistrict clears all "district" edges to the District entity.
func (ou *OrganizationUpdate) ClearDistrict() *OrganizationUpdate {
	ou.mutation.ClearDistrict()
	return ou
}

// RemoveDistrictIDs removes the "district" edge to District entities by IDs.
func (ou *OrganizationUpdate) RemoveDistrictIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveDistrictIDs(ids...)
	return ou
}

// RemoveDistrict removes "district" edges to District entities.
func (ou *OrganizationUpdate) RemoveDistrict(d ...*District) *OrganizationUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.RemoveDistrictIDs(ids...)
}

// ClearOxygenRecords clears all "oxygenRecords" edges to the OxygenRecord entity.
func (ou *OrganizationUpdate) ClearOxygenRecords() *OrganizationUpdate {
	ou.mutation.ClearOxygenRecords()
	return ou
}

// RemoveOxygenRecordIDs removes the "oxygenRecords" edge to OxygenRecord entities by IDs.
func (ou *OrganizationUpdate) RemoveOxygenRecordIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveOxygenRecordIDs(ids...)
	return ou
}

// RemoveOxygenRecords removes "oxygenRecords" edges to OxygenRecord entities.
func (ou *OrganizationUpdate) RemoveOxygenRecords(o ...*OxygenRecord) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOxygenRecordIDs(ids...)
}

// ClearBedRecords clears all "bedRecords" edges to the BedRecord entity.
func (ou *OrganizationUpdate) ClearBedRecords() *OrganizationUpdate {
	ou.mutation.ClearBedRecords()
	return ou
}

// RemoveBedRecordIDs removes the "bedRecords" edge to BedRecord entities by IDs.
func (ou *OrganizationUpdate) RemoveBedRecordIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveBedRecordIDs(ids...)
	return ou
}

// RemoveBedRecords removes "bedRecords" edges to BedRecord entities.
func (ou *OrganizationUpdate) RemoveBedRecords(b ...*BedRecord) *OrganizationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.RemoveBedRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldName,
		})
	}
	if value, ok := ou.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldCode,
		})
	}
	if value, ok := ou.mutation.Ubigeo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldUbigeo,
		})
	}
	if value, ok := ou.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldKind,
		})
	}
	if ou.mutation.KindCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: organization.FieldKind,
		})
	}
	if value, ok := ou.mutation.CovidZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: organization.FieldCovidZone,
		})
	}
	if ou.mutation.CovidZoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: organization.FieldCovidZone,
		})
	}
	if value, ok := ou.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldCategory,
		})
	}
	if ou.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: organization.FieldCategory,
		})
	}
	if ou.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRegionIDs(); len(nodes) > 0 && !ou.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedProvinceIDs(); len(nodes) > 0 && !ou.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedDistrictIDs(); len(nodes) > 0 && !ou.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OxygenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOxygenRecordsIDs(); len(nodes) > 0 && !ou.mutation.OxygenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OxygenRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedBedRecordsIDs(); len(nodes) > 0 && !ou.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetCode sets the "code" field.
func (ouo *OrganizationUpdateOne) SetCode(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCode(s)
	return ouo
}

// SetUbigeo sets the "ubigeo" field.
func (ouo *OrganizationUpdateOne) SetUbigeo(s string) *OrganizationUpdateOne {
	ouo.mutation.SetUbigeo(s)
	return ouo
}

// SetKind sets the "kind" field.
func (ouo *OrganizationUpdateOne) SetKind(s string) *OrganizationUpdateOne {
	ouo.mutation.SetKind(s)
	return ouo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableKind(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetKind(*s)
	}
	return ouo
}

// ClearKind clears the value of the "kind" field.
func (ouo *OrganizationUpdateOne) ClearKind() *OrganizationUpdateOne {
	ouo.mutation.ClearKind()
	return ouo
}

// SetCovidZone sets the "covidZone" field.
func (ouo *OrganizationUpdateOne) SetCovidZone(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetCovidZone(b)
	return ouo
}

// SetNillableCovidZone sets the "covidZone" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCovidZone(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetCovidZone(*b)
	}
	return ouo
}

// ClearCovidZone clears the value of the "covidZone" field.
func (ouo *OrganizationUpdateOne) ClearCovidZone() *OrganizationUpdateOne {
	ouo.mutation.ClearCovidZone()
	return ouo
}

// SetCategory sets the "category" field.
func (ouo *OrganizationUpdateOne) SetCategory(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCategory(s)
	return ouo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCategory(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCategory(*s)
	}
	return ouo
}

// ClearCategory clears the value of the "category" field.
func (ouo *OrganizationUpdateOne) ClearCategory() *OrganizationUpdateOne {
	ouo.mutation.ClearCategory()
	return ouo
}

// AddRegionIDs adds the "region" edge to the Region entity by IDs.
func (ouo *OrganizationUpdateOne) AddRegionIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddRegionIDs(ids...)
	return ouo
}

// AddRegion adds the "region" edges to the Region entity.
func (ouo *OrganizationUpdateOne) AddRegion(r ...*Region) *OrganizationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddRegionIDs(ids...)
}

// AddProvinceIDs adds the "province" edge to the Province entity by IDs.
func (ouo *OrganizationUpdateOne) AddProvinceIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddProvinceIDs(ids...)
	return ouo
}

// AddProvince adds the "province" edges to the Province entity.
func (ouo *OrganizationUpdateOne) AddProvince(p ...*Province) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddProvinceIDs(ids...)
}

// AddDistrictIDs adds the "district" edge to the District entity by IDs.
func (ouo *OrganizationUpdateOne) AddDistrictIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddDistrictIDs(ids...)
	return ouo
}

// AddDistrict adds the "district" edges to the District entity.
func (ouo *OrganizationUpdateOne) AddDistrict(d ...*District) *OrganizationUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.AddDistrictIDs(ids...)
}

// AddOxygenRecordIDs adds the "oxygenRecords" edge to the OxygenRecord entity by IDs.
func (ouo *OrganizationUpdateOne) AddOxygenRecordIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddOxygenRecordIDs(ids...)
	return ouo
}

// AddOxygenRecords adds the "oxygenRecords" edges to the OxygenRecord entity.
func (ouo *OrganizationUpdateOne) AddOxygenRecords(o ...*OxygenRecord) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOxygenRecordIDs(ids...)
}

// AddBedRecordIDs adds the "bedRecords" edge to the BedRecord entity by IDs.
func (ouo *OrganizationUpdateOne) AddBedRecordIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddBedRecordIDs(ids...)
	return ouo
}

// AddBedRecords adds the "bedRecords" edges to the BedRecord entity.
func (ouo *OrganizationUpdateOne) AddBedRecords(b ...*BedRecord) *OrganizationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.AddBedRecordIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearRegion clears all "region" edges to the Region entity.
func (ouo *OrganizationUpdateOne) ClearRegion() *OrganizationUpdateOne {
	ouo.mutation.ClearRegion()
	return ouo
}

// RemoveRegionIDs removes the "region" edge to Region entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveRegionIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveRegionIDs(ids...)
	return ouo
}

// RemoveRegion removes "region" edges to Region entities.
func (ouo *OrganizationUpdateOne) RemoveRegion(r ...*Region) *OrganizationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveRegionIDs(ids...)
}

// ClearProvince clears all "province" edges to the Province entity.
func (ouo *OrganizationUpdateOne) ClearProvince() *OrganizationUpdateOne {
	ouo.mutation.ClearProvince()
	return ouo
}

// RemoveProvinceIDs removes the "province" edge to Province entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveProvinceIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveProvinceIDs(ids...)
	return ouo
}

// RemoveProvince removes "province" edges to Province entities.
func (ouo *OrganizationUpdateOne) RemoveProvince(p ...*Province) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemoveProvinceIDs(ids...)
}

// ClearDistrict clears all "district" edges to the District entity.
func (ouo *OrganizationUpdateOne) ClearDistrict() *OrganizationUpdateOne {
	ouo.mutation.ClearDistrict()
	return ouo
}

// RemoveDistrictIDs removes the "district" edge to District entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveDistrictIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveDistrictIDs(ids...)
	return ouo
}

// RemoveDistrict removes "district" edges to District entities.
func (ouo *OrganizationUpdateOne) RemoveDistrict(d ...*District) *OrganizationUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.RemoveDistrictIDs(ids...)
}

// ClearOxygenRecords clears all "oxygenRecords" edges to the OxygenRecord entity.
func (ouo *OrganizationUpdateOne) ClearOxygenRecords() *OrganizationUpdateOne {
	ouo.mutation.ClearOxygenRecords()
	return ouo
}

// RemoveOxygenRecordIDs removes the "oxygenRecords" edge to OxygenRecord entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOxygenRecordIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveOxygenRecordIDs(ids...)
	return ouo
}

// RemoveOxygenRecords removes "oxygenRecords" edges to OxygenRecord entities.
func (ouo *OrganizationUpdateOne) RemoveOxygenRecords(o ...*OxygenRecord) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOxygenRecordIDs(ids...)
}

// ClearBedRecords clears all "bedRecords" edges to the BedRecord entity.
func (ouo *OrganizationUpdateOne) ClearBedRecords() *OrganizationUpdateOne {
	ouo.mutation.ClearBedRecords()
	return ouo
}

// RemoveBedRecordIDs removes the "bedRecords" edge to BedRecord entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveBedRecordIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveBedRecordIDs(ids...)
	return ouo
}

// RemoveBedRecords removes "bedRecords" edges to BedRecord entities.
func (ouo *OrganizationUpdateOne) RemoveBedRecords(b ...*BedRecord) *OrganizationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.RemoveBedRecordIDs(ids...)
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	var (
		err  error
		node *Organization
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Organization.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldName,
		})
	}
	if value, ok := ouo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldCode,
		})
	}
	if value, ok := ouo.mutation.Ubigeo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldUbigeo,
		})
	}
	if value, ok := ouo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldKind,
		})
	}
	if ouo.mutation.KindCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: organization.FieldKind,
		})
	}
	if value, ok := ouo.mutation.CovidZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: organization.FieldCovidZone,
		})
	}
	if ouo.mutation.CovidZoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: organization.FieldCovidZone,
		})
	}
	if value, ok := ouo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldCategory,
		})
	}
	if ouo.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: organization.FieldCategory,
		})
	}
	if ouo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRegionIDs(); len(nodes) > 0 && !ouo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.RegionTable,
			Columns: organization.RegionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedProvinceIDs(); len(nodes) > 0 && !ouo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.ProvinceTable,
			Columns: organization.ProvincePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedDistrictIDs(); len(nodes) > 0 && !ouo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.DistrictTable,
			Columns: organization.DistrictPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OxygenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOxygenRecordsIDs(); len(nodes) > 0 && !ouo.mutation.OxygenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OxygenRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.OxygenRecordsTable,
			Columns: organization.OxygenRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oxygenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedBedRecordsIDs(); len(nodes) > 0 && !ouo.mutation.BedRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BedRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.BedRecordsTable,
			Columns: organization.BedRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
