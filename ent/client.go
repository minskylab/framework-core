// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"opencensus/core/ent/migrate"

	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/deathrecord"
	"opencensus/core/ent/district"
	"opencensus/core/ent/infectedrecord"
	"opencensus/core/ent/occurency"
	"opencensus/core/ent/oxygenrecord"
	"opencensus/core/ent/place"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BedRecord is the client for interacting with the BedRecord builders.
	BedRecord *BedRecordClient
	// DeathRecord is the client for interacting with the DeathRecord builders.
	DeathRecord *DeathRecordClient
	// District is the client for interacting with the District builders.
	District *DistrictClient
	// InfectedRecord is the client for interacting with the InfectedRecord builders.
	InfectedRecord *InfectedRecordClient
	// Occurency is the client for interacting with the Occurency builders.
	Occurency *OccurencyClient
	// OxygenRecord is the client for interacting with the OxygenRecord builders.
	OxygenRecord *OxygenRecordClient
	// Place is the client for interacting with the Place builders.
	Place *PlaceClient
	// Province is the client for interacting with the Province builders.
	Province *ProvinceClient
	// Region is the client for interacting with the Region builders.
	Region *RegionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BedRecord = NewBedRecordClient(c.config)
	c.DeathRecord = NewDeathRecordClient(c.config)
	c.District = NewDistrictClient(c.config)
	c.InfectedRecord = NewInfectedRecordClient(c.config)
	c.Occurency = NewOccurencyClient(c.config)
	c.OxygenRecord = NewOxygenRecordClient(c.config)
	c.Place = NewPlaceClient(c.config)
	c.Province = NewProvinceClient(c.config)
	c.Region = NewRegionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		BedRecord:      NewBedRecordClient(cfg),
		DeathRecord:    NewDeathRecordClient(cfg),
		District:       NewDistrictClient(cfg),
		InfectedRecord: NewInfectedRecordClient(cfg),
		Occurency:      NewOccurencyClient(cfg),
		OxygenRecord:   NewOxygenRecordClient(cfg),
		Place:          NewPlaceClient(cfg),
		Province:       NewProvinceClient(cfg),
		Region:         NewRegionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:         cfg,
		BedRecord:      NewBedRecordClient(cfg),
		DeathRecord:    NewDeathRecordClient(cfg),
		District:       NewDistrictClient(cfg),
		InfectedRecord: NewInfectedRecordClient(cfg),
		Occurency:      NewOccurencyClient(cfg),
		OxygenRecord:   NewOxygenRecordClient(cfg),
		Place:          NewPlaceClient(cfg),
		Province:       NewProvinceClient(cfg),
		Region:         NewRegionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BedRecord.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BedRecord.Use(hooks...)
	c.DeathRecord.Use(hooks...)
	c.District.Use(hooks...)
	c.InfectedRecord.Use(hooks...)
	c.Occurency.Use(hooks...)
	c.OxygenRecord.Use(hooks...)
	c.Place.Use(hooks...)
	c.Province.Use(hooks...)
	c.Region.Use(hooks...)
}

// BedRecordClient is a client for the BedRecord schema.
type BedRecordClient struct {
	config
}

// NewBedRecordClient returns a client for the BedRecord from the given config.
func NewBedRecordClient(c config) *BedRecordClient {
	return &BedRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bedrecord.Hooks(f(g(h())))`.
func (c *BedRecordClient) Use(hooks ...Hook) {
	c.hooks.BedRecord = append(c.hooks.BedRecord, hooks...)
}

// Create returns a create builder for BedRecord.
func (c *BedRecordClient) Create() *BedRecordCreate {
	mutation := newBedRecordMutation(c.config, OpCreate)
	return &BedRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BedRecord entities.
func (c *BedRecordClient) CreateBulk(builders ...*BedRecordCreate) *BedRecordCreateBulk {
	return &BedRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BedRecord.
func (c *BedRecordClient) Update() *BedRecordUpdate {
	mutation := newBedRecordMutation(c.config, OpUpdate)
	return &BedRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BedRecordClient) UpdateOne(br *BedRecord) *BedRecordUpdateOne {
	mutation := newBedRecordMutation(c.config, OpUpdateOne, withBedRecord(br))
	return &BedRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BedRecordClient) UpdateOneID(id int) *BedRecordUpdateOne {
	mutation := newBedRecordMutation(c.config, OpUpdateOne, withBedRecordID(id))
	return &BedRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BedRecord.
func (c *BedRecordClient) Delete() *BedRecordDelete {
	mutation := newBedRecordMutation(c.config, OpDelete)
	return &BedRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BedRecordClient) DeleteOne(br *BedRecord) *BedRecordDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BedRecordClient) DeleteOneID(id int) *BedRecordDeleteOne {
	builder := c.Delete().Where(bedrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BedRecordDeleteOne{builder}
}

// Query returns a query builder for BedRecord.
func (c *BedRecordClient) Query() *BedRecordQuery {
	return &BedRecordQuery{config: c.config}
}

// Get returns a BedRecord entity by its id.
func (c *BedRecordClient) Get(ctx context.Context, id int) (*BedRecord, error) {
	return c.Query().Where(bedrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BedRecordClient) GetX(ctx context.Context, id int) *BedRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a BedRecord.
func (c *BedRecordClient) QueryPlaces(br *BedRecord) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bedrecord.Table, bedrecord.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, bedrecord.PlacesTable, bedrecord.PlacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BedRecordClient) Hooks() []Hook {
	return c.hooks.BedRecord
}

// DeathRecordClient is a client for the DeathRecord schema.
type DeathRecordClient struct {
	config
}

// NewDeathRecordClient returns a client for the DeathRecord from the given config.
func NewDeathRecordClient(c config) *DeathRecordClient {
	return &DeathRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deathrecord.Hooks(f(g(h())))`.
func (c *DeathRecordClient) Use(hooks ...Hook) {
	c.hooks.DeathRecord = append(c.hooks.DeathRecord, hooks...)
}

// Create returns a create builder for DeathRecord.
func (c *DeathRecordClient) Create() *DeathRecordCreate {
	mutation := newDeathRecordMutation(c.config, OpCreate)
	return &DeathRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeathRecord entities.
func (c *DeathRecordClient) CreateBulk(builders ...*DeathRecordCreate) *DeathRecordCreateBulk {
	return &DeathRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeathRecord.
func (c *DeathRecordClient) Update() *DeathRecordUpdate {
	mutation := newDeathRecordMutation(c.config, OpUpdate)
	return &DeathRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeathRecordClient) UpdateOne(dr *DeathRecord) *DeathRecordUpdateOne {
	mutation := newDeathRecordMutation(c.config, OpUpdateOne, withDeathRecord(dr))
	return &DeathRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeathRecordClient) UpdateOneID(id int) *DeathRecordUpdateOne {
	mutation := newDeathRecordMutation(c.config, OpUpdateOne, withDeathRecordID(id))
	return &DeathRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeathRecord.
func (c *DeathRecordClient) Delete() *DeathRecordDelete {
	mutation := newDeathRecordMutation(c.config, OpDelete)
	return &DeathRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeathRecordClient) DeleteOne(dr *DeathRecord) *DeathRecordDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeathRecordClient) DeleteOneID(id int) *DeathRecordDeleteOne {
	builder := c.Delete().Where(deathrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeathRecordDeleteOne{builder}
}

// Query returns a query builder for DeathRecord.
func (c *DeathRecordClient) Query() *DeathRecordQuery {
	return &DeathRecordQuery{config: c.config}
}

// Get returns a DeathRecord entity by its id.
func (c *DeathRecordClient) Get(ctx context.Context, id int) (*DeathRecord, error) {
	return c.Query().Where(deathrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeathRecordClient) GetX(ctx context.Context, id int) *DeathRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a DeathRecord.
func (c *DeathRecordClient) QueryPlaces(dr *DeathRecord) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathrecord.Table, deathrecord.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deathrecord.PlacesTable, deathrecord.PlacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeathRecordClient) Hooks() []Hook {
	return c.hooks.DeathRecord
}

// DistrictClient is a client for the District schema.
type DistrictClient struct {
	config
}

// NewDistrictClient returns a client for the District from the given config.
func NewDistrictClient(c config) *DistrictClient {
	return &DistrictClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `district.Hooks(f(g(h())))`.
func (c *DistrictClient) Use(hooks ...Hook) {
	c.hooks.District = append(c.hooks.District, hooks...)
}

// Create returns a create builder for District.
func (c *DistrictClient) Create() *DistrictCreate {
	mutation := newDistrictMutation(c.config, OpCreate)
	return &DistrictCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of District entities.
func (c *DistrictClient) CreateBulk(builders ...*DistrictCreate) *DistrictCreateBulk {
	return &DistrictCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for District.
func (c *DistrictClient) Update() *DistrictUpdate {
	mutation := newDistrictMutation(c.config, OpUpdate)
	return &DistrictUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DistrictClient) UpdateOne(d *District) *DistrictUpdateOne {
	mutation := newDistrictMutation(c.config, OpUpdateOne, withDistrict(d))
	return &DistrictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DistrictClient) UpdateOneID(id int) *DistrictUpdateOne {
	mutation := newDistrictMutation(c.config, OpUpdateOne, withDistrictID(id))
	return &DistrictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for District.
func (c *DistrictClient) Delete() *DistrictDelete {
	mutation := newDistrictMutation(c.config, OpDelete)
	return &DistrictDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DistrictClient) DeleteOne(d *District) *DistrictDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DistrictClient) DeleteOneID(id int) *DistrictDeleteOne {
	builder := c.Delete().Where(district.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DistrictDeleteOne{builder}
}

// Query returns a query builder for District.
func (c *DistrictClient) Query() *DistrictQuery {
	return &DistrictQuery{config: c.config}
}

// Get returns a District entity by its id.
func (c *DistrictClient) Get(ctx context.Context, id int) (*District, error) {
	return c.Query().Where(district.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DistrictClient) GetX(ctx context.Context, id int) *District {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a District.
func (c *DistrictClient) QueryPlaces(d *District) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(district.Table, district.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, district.PlacesTable, district.PlacesColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DistrictClient) Hooks() []Hook {
	return c.hooks.District
}

// InfectedRecordClient is a client for the InfectedRecord schema.
type InfectedRecordClient struct {
	config
}

// NewInfectedRecordClient returns a client for the InfectedRecord from the given config.
func NewInfectedRecordClient(c config) *InfectedRecordClient {
	return &InfectedRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `infectedrecord.Hooks(f(g(h())))`.
func (c *InfectedRecordClient) Use(hooks ...Hook) {
	c.hooks.InfectedRecord = append(c.hooks.InfectedRecord, hooks...)
}

// Create returns a create builder for InfectedRecord.
func (c *InfectedRecordClient) Create() *InfectedRecordCreate {
	mutation := newInfectedRecordMutation(c.config, OpCreate)
	return &InfectedRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InfectedRecord entities.
func (c *InfectedRecordClient) CreateBulk(builders ...*InfectedRecordCreate) *InfectedRecordCreateBulk {
	return &InfectedRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InfectedRecord.
func (c *InfectedRecordClient) Update() *InfectedRecordUpdate {
	mutation := newInfectedRecordMutation(c.config, OpUpdate)
	return &InfectedRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InfectedRecordClient) UpdateOne(ir *InfectedRecord) *InfectedRecordUpdateOne {
	mutation := newInfectedRecordMutation(c.config, OpUpdateOne, withInfectedRecord(ir))
	return &InfectedRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InfectedRecordClient) UpdateOneID(id int) *InfectedRecordUpdateOne {
	mutation := newInfectedRecordMutation(c.config, OpUpdateOne, withInfectedRecordID(id))
	return &InfectedRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InfectedRecord.
func (c *InfectedRecordClient) Delete() *InfectedRecordDelete {
	mutation := newInfectedRecordMutation(c.config, OpDelete)
	return &InfectedRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InfectedRecordClient) DeleteOne(ir *InfectedRecord) *InfectedRecordDeleteOne {
	return c.DeleteOneID(ir.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InfectedRecordClient) DeleteOneID(id int) *InfectedRecordDeleteOne {
	builder := c.Delete().Where(infectedrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InfectedRecordDeleteOne{builder}
}

// Query returns a query builder for InfectedRecord.
func (c *InfectedRecordClient) Query() *InfectedRecordQuery {
	return &InfectedRecordQuery{config: c.config}
}

// Get returns a InfectedRecord entity by its id.
func (c *InfectedRecordClient) Get(ctx context.Context, id int) (*InfectedRecord, error) {
	return c.Query().Where(infectedrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InfectedRecordClient) GetX(ctx context.Context, id int) *InfectedRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a InfectedRecord.
func (c *InfectedRecordClient) QueryPlaces(ir *InfectedRecord) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(infectedrecord.Table, infectedrecord.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, infectedrecord.PlacesTable, infectedrecord.PlacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InfectedRecordClient) Hooks() []Hook {
	return c.hooks.InfectedRecord
}

// OccurencyClient is a client for the Occurency schema.
type OccurencyClient struct {
	config
}

// NewOccurencyClient returns a client for the Occurency from the given config.
func NewOccurencyClient(c config) *OccurencyClient {
	return &OccurencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `occurency.Hooks(f(g(h())))`.
func (c *OccurencyClient) Use(hooks ...Hook) {
	c.hooks.Occurency = append(c.hooks.Occurency, hooks...)
}

// Create returns a create builder for Occurency.
func (c *OccurencyClient) Create() *OccurencyCreate {
	mutation := newOccurencyMutation(c.config, OpCreate)
	return &OccurencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Occurency entities.
func (c *OccurencyClient) CreateBulk(builders ...*OccurencyCreate) *OccurencyCreateBulk {
	return &OccurencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Occurency.
func (c *OccurencyClient) Update() *OccurencyUpdate {
	mutation := newOccurencyMutation(c.config, OpUpdate)
	return &OccurencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OccurencyClient) UpdateOne(o *Occurency) *OccurencyUpdateOne {
	mutation := newOccurencyMutation(c.config, OpUpdateOne, withOccurency(o))
	return &OccurencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OccurencyClient) UpdateOneID(id int) *OccurencyUpdateOne {
	mutation := newOccurencyMutation(c.config, OpUpdateOne, withOccurencyID(id))
	return &OccurencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Occurency.
func (c *OccurencyClient) Delete() *OccurencyDelete {
	mutation := newOccurencyMutation(c.config, OpDelete)
	return &OccurencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OccurencyClient) DeleteOne(o *Occurency) *OccurencyDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OccurencyClient) DeleteOneID(id int) *OccurencyDeleteOne {
	builder := c.Delete().Where(occurency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OccurencyDeleteOne{builder}
}

// Query returns a query builder for Occurency.
func (c *OccurencyClient) Query() *OccurencyQuery {
	return &OccurencyQuery{config: c.config}
}

// Get returns a Occurency entity by its id.
func (c *OccurencyClient) Get(ctx context.Context, id int) (*Occurency, error) {
	return c.Query().Where(occurency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OccurencyClient) GetX(ctx context.Context, id int) *Occurency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegion queries the region edge of a Occurency.
func (c *OccurencyClient) QueryRegion(o *Occurency) *RegionQuery {
	query := &RegionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(occurency.Table, occurency.FieldID, id),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, occurency.RegionTable, occurency.RegionColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvince queries the province edge of a Occurency.
func (c *OccurencyClient) QueryProvince(o *Occurency) *ProvinceQuery {
	query := &ProvinceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(occurency.Table, occurency.FieldID, id),
			sqlgraph.To(province.Table, province.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, occurency.ProvinceTable, occurency.ProvinceColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDistrict queries the district edge of a Occurency.
func (c *OccurencyClient) QueryDistrict(o *Occurency) *DistrictQuery {
	query := &DistrictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(occurency.Table, occurency.FieldID, id),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, occurency.DistrictTable, occurency.DistrictColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OccurencyClient) Hooks() []Hook {
	return c.hooks.Occurency
}

// OxygenRecordClient is a client for the OxygenRecord schema.
type OxygenRecordClient struct {
	config
}

// NewOxygenRecordClient returns a client for the OxygenRecord from the given config.
func NewOxygenRecordClient(c config) *OxygenRecordClient {
	return &OxygenRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oxygenrecord.Hooks(f(g(h())))`.
func (c *OxygenRecordClient) Use(hooks ...Hook) {
	c.hooks.OxygenRecord = append(c.hooks.OxygenRecord, hooks...)
}

// Create returns a create builder for OxygenRecord.
func (c *OxygenRecordClient) Create() *OxygenRecordCreate {
	mutation := newOxygenRecordMutation(c.config, OpCreate)
	return &OxygenRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OxygenRecord entities.
func (c *OxygenRecordClient) CreateBulk(builders ...*OxygenRecordCreate) *OxygenRecordCreateBulk {
	return &OxygenRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OxygenRecord.
func (c *OxygenRecordClient) Update() *OxygenRecordUpdate {
	mutation := newOxygenRecordMutation(c.config, OpUpdate)
	return &OxygenRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OxygenRecordClient) UpdateOne(or *OxygenRecord) *OxygenRecordUpdateOne {
	mutation := newOxygenRecordMutation(c.config, OpUpdateOne, withOxygenRecord(or))
	return &OxygenRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OxygenRecordClient) UpdateOneID(id int) *OxygenRecordUpdateOne {
	mutation := newOxygenRecordMutation(c.config, OpUpdateOne, withOxygenRecordID(id))
	return &OxygenRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OxygenRecord.
func (c *OxygenRecordClient) Delete() *OxygenRecordDelete {
	mutation := newOxygenRecordMutation(c.config, OpDelete)
	return &OxygenRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OxygenRecordClient) DeleteOne(or *OxygenRecord) *OxygenRecordDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OxygenRecordClient) DeleteOneID(id int) *OxygenRecordDeleteOne {
	builder := c.Delete().Where(oxygenrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OxygenRecordDeleteOne{builder}
}

// Query returns a query builder for OxygenRecord.
func (c *OxygenRecordClient) Query() *OxygenRecordQuery {
	return &OxygenRecordQuery{config: c.config}
}

// Get returns a OxygenRecord entity by its id.
func (c *OxygenRecordClient) Get(ctx context.Context, id int) (*OxygenRecord, error) {
	return c.Query().Where(oxygenrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OxygenRecordClient) GetX(ctx context.Context, id int) *OxygenRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a OxygenRecord.
func (c *OxygenRecordClient) QueryPlaces(or *OxygenRecord) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oxygenrecord.Table, oxygenrecord.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, oxygenrecord.PlacesTable, oxygenrecord.PlacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OxygenRecordClient) Hooks() []Hook {
	return c.hooks.OxygenRecord
}

// PlaceClient is a client for the Place schema.
type PlaceClient struct {
	config
}

// NewPlaceClient returns a client for the Place from the given config.
func NewPlaceClient(c config) *PlaceClient {
	return &PlaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `place.Hooks(f(g(h())))`.
func (c *PlaceClient) Use(hooks ...Hook) {
	c.hooks.Place = append(c.hooks.Place, hooks...)
}

// Create returns a create builder for Place.
func (c *PlaceClient) Create() *PlaceCreate {
	mutation := newPlaceMutation(c.config, OpCreate)
	return &PlaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Place entities.
func (c *PlaceClient) CreateBulk(builders ...*PlaceCreate) *PlaceCreateBulk {
	return &PlaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Place.
func (c *PlaceClient) Update() *PlaceUpdate {
	mutation := newPlaceMutation(c.config, OpUpdate)
	return &PlaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaceClient) UpdateOne(pl *Place) *PlaceUpdateOne {
	mutation := newPlaceMutation(c.config, OpUpdateOne, withPlace(pl))
	return &PlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaceClient) UpdateOneID(id int) *PlaceUpdateOne {
	mutation := newPlaceMutation(c.config, OpUpdateOne, withPlaceID(id))
	return &PlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Place.
func (c *PlaceClient) Delete() *PlaceDelete {
	mutation := newPlaceMutation(c.config, OpDelete)
	return &PlaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlaceClient) DeleteOne(pl *Place) *PlaceDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlaceClient) DeleteOneID(id int) *PlaceDeleteOne {
	builder := c.Delete().Where(place.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaceDeleteOne{builder}
}

// Query returns a query builder for Place.
func (c *PlaceClient) Query() *PlaceQuery {
	return &PlaceQuery{config: c.config}
}

// Get returns a Place entity by its id.
func (c *PlaceClient) Get(ctx context.Context, id int) (*Place, error) {
	return c.Query().Where(place.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaceClient) GetX(ctx context.Context, id int) *Place {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOxygenrecords queries the oxygenrecords edge of a Place.
func (c *PlaceClient) QueryOxygenrecords(pl *Place) *OxygenRecordQuery {
	query := &OxygenRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(oxygenrecord.Table, oxygenrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.OxygenrecordsTable, place.OxygenrecordsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBedRecords queries the bedRecords edge of a Place.
func (c *PlaceClient) QueryBedRecords(pl *Place) *BedRecordQuery {
	query := &BedRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(bedrecord.Table, bedrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.BedRecordsTable, place.BedRecordsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeathRecords queries the deathRecords edge of a Place.
func (c *PlaceClient) QueryDeathRecords(pl *Place) *DeathRecordQuery {
	query := &DeathRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(deathrecord.Table, deathrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.DeathRecordsTable, place.DeathRecordsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInfectedRecords queries the infectedRecords edge of a Place.
func (c *PlaceClient) QueryInfectedRecords(pl *Place) *InfectedRecordQuery {
	query := &InfectedRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(infectedrecord.Table, infectedrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.InfectedRecordsTable, place.InfectedRecordsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegion queries the region edge of a Place.
func (c *PlaceClient) QueryRegion(pl *Place) *RegionQuery {
	query := &RegionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, place.RegionTable, place.RegionColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvince queries the province edge of a Place.
func (c *PlaceClient) QueryProvince(pl *Place) *ProvinceQuery {
	query := &ProvinceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(province.Table, province.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, place.ProvinceTable, place.ProvinceColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDistrict queries the district edge of a Place.
func (c *PlaceClient) QueryDistrict(pl *Place) *DistrictQuery {
	query := &DistrictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, place.DistrictTable, place.DistrictColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaceClient) Hooks() []Hook {
	return c.hooks.Place
}

// ProvinceClient is a client for the Province schema.
type ProvinceClient struct {
	config
}

// NewProvinceClient returns a client for the Province from the given config.
func NewProvinceClient(c config) *ProvinceClient {
	return &ProvinceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `province.Hooks(f(g(h())))`.
func (c *ProvinceClient) Use(hooks ...Hook) {
	c.hooks.Province = append(c.hooks.Province, hooks...)
}

// Create returns a create builder for Province.
func (c *ProvinceClient) Create() *ProvinceCreate {
	mutation := newProvinceMutation(c.config, OpCreate)
	return &ProvinceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Province entities.
func (c *ProvinceClient) CreateBulk(builders ...*ProvinceCreate) *ProvinceCreateBulk {
	return &ProvinceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Province.
func (c *ProvinceClient) Update() *ProvinceUpdate {
	mutation := newProvinceMutation(c.config, OpUpdate)
	return &ProvinceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProvinceClient) UpdateOne(pr *Province) *ProvinceUpdateOne {
	mutation := newProvinceMutation(c.config, OpUpdateOne, withProvince(pr))
	return &ProvinceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProvinceClient) UpdateOneID(id int) *ProvinceUpdateOne {
	mutation := newProvinceMutation(c.config, OpUpdateOne, withProvinceID(id))
	return &ProvinceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Province.
func (c *ProvinceClient) Delete() *ProvinceDelete {
	mutation := newProvinceMutation(c.config, OpDelete)
	return &ProvinceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProvinceClient) DeleteOne(pr *Province) *ProvinceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProvinceClient) DeleteOneID(id int) *ProvinceDeleteOne {
	builder := c.Delete().Where(province.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProvinceDeleteOne{builder}
}

// Query returns a query builder for Province.
func (c *ProvinceClient) Query() *ProvinceQuery {
	return &ProvinceQuery{config: c.config}
}

// Get returns a Province entity by its id.
func (c *ProvinceClient) Get(ctx context.Context, id int) (*Province, error) {
	return c.Query().Where(province.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProvinceClient) GetX(ctx context.Context, id int) *Province {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a Province.
func (c *ProvinceClient) QueryPlaces(pr *Province) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(province.Table, province.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, province.PlacesTable, province.PlacesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProvinceClient) Hooks() []Hook {
	return c.hooks.Province
}

// RegionClient is a client for the Region schema.
type RegionClient struct {
	config
}

// NewRegionClient returns a client for the Region from the given config.
func NewRegionClient(c config) *RegionClient {
	return &RegionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `region.Hooks(f(g(h())))`.
func (c *RegionClient) Use(hooks ...Hook) {
	c.hooks.Region = append(c.hooks.Region, hooks...)
}

// Create returns a create builder for Region.
func (c *RegionClient) Create() *RegionCreate {
	mutation := newRegionMutation(c.config, OpCreate)
	return &RegionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Region entities.
func (c *RegionClient) CreateBulk(builders ...*RegionCreate) *RegionCreateBulk {
	return &RegionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Region.
func (c *RegionClient) Update() *RegionUpdate {
	mutation := newRegionMutation(c.config, OpUpdate)
	return &RegionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegionClient) UpdateOne(r *Region) *RegionUpdateOne {
	mutation := newRegionMutation(c.config, OpUpdateOne, withRegion(r))
	return &RegionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegionClient) UpdateOneID(id int) *RegionUpdateOne {
	mutation := newRegionMutation(c.config, OpUpdateOne, withRegionID(id))
	return &RegionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Region.
func (c *RegionClient) Delete() *RegionDelete {
	mutation := newRegionMutation(c.config, OpDelete)
	return &RegionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RegionClient) DeleteOne(r *Region) *RegionDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RegionClient) DeleteOneID(id int) *RegionDeleteOne {
	builder := c.Delete().Where(region.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegionDeleteOne{builder}
}

// Query returns a query builder for Region.
func (c *RegionClient) Query() *RegionQuery {
	return &RegionQuery{config: c.config}
}

// Get returns a Region entity by its id.
func (c *RegionClient) Get(ctx context.Context, id int) (*Region, error) {
	return c.Query().Where(region.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegionClient) GetX(ctx context.Context, id int) *Region {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a Region.
func (c *RegionClient) QueryPlaces(r *Region) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, region.PlacesTable, region.PlacesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegionClient) Hooks() []Hook {
	return c.hooks.Region
}
