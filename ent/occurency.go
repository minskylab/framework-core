// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/district"
	"opencensus/core/ent/occurency"
	"opencensus/core/ent/province"
	"opencensus/core/ent/region"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Occurency is the model entity for the Occurency schema.
type Occurency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// ReportedRecord holds the value of the "reportedRecord" field.
	ReportedRecord time.Time `json:"reportedRecord,omitempty"`
	// ResultDate holds the value of the "resultDate" field.
	ResultDate time.Time `json:"resultDate,omitempty"`
	// BiologicalSex holds the value of the "biologicalSex" field.
	BiologicalSex string `json:"biologicalSex,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OccurencyQuery when eager-loading is set.
	Edges              OccurencyEdges `json:"edges"`
	occurency_region   *int
	occurency_province *int
	occurency_district *int
}

// OccurencyEdges holds the relations/edges for other nodes in the graph.
type OccurencyEdges struct {
	// Region holds the value of the region edge.
	Region *Region `json:"region,omitempty"`
	// Province holds the value of the province edge.
	Province *Province `json:"province,omitempty"`
	// District holds the value of the district edge.
	District *District `json:"district,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccurencyEdges) RegionOrErr() (*Region, error) {
	if e.loadedTypes[0] {
		if e.Region == nil {
			// The edge region was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: region.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// ProvinceOrErr returns the Province value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccurencyEdges) ProvinceOrErr() (*Province, error) {
	if e.loadedTypes[1] {
		if e.Province == nil {
			// The edge province was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: province.Label}
		}
		return e.Province, nil
	}
	return nil, &NotLoadedError{edge: "province"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccurencyEdges) DistrictOrErr() (*District, error) {
	if e.loadedTypes[2] {
		if e.District == nil {
			// The edge district was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: district.Label}
		}
		return e.District, nil
	}
	return nil, &NotLoadedError{edge: "district"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Occurency) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case occurency.FieldID, occurency.FieldAge:
			values[i] = &sql.NullInt64{}
		case occurency.FieldUUID, occurency.FieldBiologicalSex:
			values[i] = &sql.NullString{}
		case occurency.FieldReportedRecord, occurency.FieldResultDate:
			values[i] = &sql.NullTime{}
		case occurency.ForeignKeys[0]: // occurency_region
			values[i] = &sql.NullInt64{}
		case occurency.ForeignKeys[1]: // occurency_province
			values[i] = &sql.NullInt64{}
		case occurency.ForeignKeys[2]: // occurency_district
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Occurency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Occurency fields.
func (o *Occurency) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case occurency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case occurency.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				o.UUID = value.String
			}
		case occurency.FieldReportedRecord:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reportedRecord", values[i])
			} else if value.Valid {
				o.ReportedRecord = value.Time
			}
		case occurency.FieldResultDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resultDate", values[i])
			} else if value.Valid {
				o.ResultDate = value.Time
			}
		case occurency.FieldBiologicalSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biologicalSex", values[i])
			} else if value.Valid {
				o.BiologicalSex = value.String
			}
		case occurency.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				o.Age = int(value.Int64)
			}
		case occurency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field occurency_region", value)
			} else if value.Valid {
				o.occurency_region = new(int)
				*o.occurency_region = int(value.Int64)
			}
		case occurency.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field occurency_province", value)
			} else if value.Valid {
				o.occurency_province = new(int)
				*o.occurency_province = int(value.Int64)
			}
		case occurency.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field occurency_district", value)
			} else if value.Valid {
				o.occurency_district = new(int)
				*o.occurency_district = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRegion queries the "region" edge of the Occurency entity.
func (o *Occurency) QueryRegion() *RegionQuery {
	return (&OccurencyClient{config: o.config}).QueryRegion(o)
}

// QueryProvince queries the "province" edge of the Occurency entity.
func (o *Occurency) QueryProvince() *ProvinceQuery {
	return (&OccurencyClient{config: o.config}).QueryProvince(o)
}

// QueryDistrict queries the "district" edge of the Occurency entity.
func (o *Occurency) QueryDistrict() *DistrictQuery {
	return (&OccurencyClient{config: o.config}).QueryDistrict(o)
}

// Update returns a builder for updating this Occurency.
// Note that you need to call Occurency.Unwrap() before calling this method if this Occurency
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Occurency) Update() *OccurencyUpdateOne {
	return (&OccurencyClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Occurency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Occurency) Unwrap() *Occurency {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Occurency is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Occurency) String() string {
	var builder strings.Builder
	builder.WriteString("Occurency(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(o.UUID)
	builder.WriteString(", reportedRecord=")
	builder.WriteString(o.ReportedRecord.Format(time.ANSIC))
	builder.WriteString(", resultDate=")
	builder.WriteString(o.ResultDate.Format(time.ANSIC))
	builder.WriteString(", biologicalSex=")
	builder.WriteString(o.BiologicalSex)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", o.Age))
	builder.WriteByte(')')
	return builder.String()
}

// Occurencies is a parsable slice of Occurency.
type Occurencies []*Occurency

func (o Occurencies) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
