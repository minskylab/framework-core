// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/district"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// District is the model entity for the District schema.
type District struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DistrictQuery when eager-loading is set.
	Edges DistrictEdges `json:"edges"`
}

// DistrictEdges holds the relations/edges for other nodes in the graph.
type DistrictEdges struct {
	// Places holds the value of the places edge.
	Places []*Place `json:"places,omitempty"`
	// Provinces holds the value of the provinces edge.
	Provinces []*Province `json:"provinces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlacesOrErr returns the Places value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) PlacesOrErr() ([]*Place, error) {
	if e.loadedTypes[0] {
		return e.Places, nil
	}
	return nil, &NotLoadedError{edge: "places"}
}

// ProvincesOrErr returns the Provinces value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) ProvincesOrErr() ([]*Province, error) {
	if e.loadedTypes[1] {
		return e.Provinces, nil
	}
	return nil, &NotLoadedError{edge: "provinces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*District) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case district.FieldID:
			values[i] = &sql.NullInt64{}
		case district.FieldName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type District", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the District fields.
func (d *District) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case district.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case district.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		}
	}
	return nil
}

// QueryPlaces queries the "places" edge of the District entity.
func (d *District) QueryPlaces() *PlaceQuery {
	return (&DistrictClient{config: d.config}).QueryPlaces(d)
}

// QueryProvinces queries the "provinces" edge of the District entity.
func (d *District) QueryProvinces() *ProvinceQuery {
	return (&DistrictClient{config: d.config}).QueryProvinces(d)
}

// Update returns a builder for updating this District.
// Note that you need to call District.Unwrap() before calling this method if this District
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *District) Update() *DistrictUpdateOne {
	return (&DistrictClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the District entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *District) Unwrap() *District {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: District is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *District) String() string {
	var builder strings.Builder
	builder.WriteString("District(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Districts is a parsable slice of District.
type Districts []*District

func (d Districts) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
