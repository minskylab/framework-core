// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"opencensus/core/ent/deathrecord"
	"opencensus/core/ent/place"
	"opencensus/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeathRecordUpdate is the builder for updating DeathRecord entities.
type DeathRecordUpdate struct {
	config
	hooks    []Hook
	mutation *DeathRecordMutation
}

// Where adds a new predicate for the DeathRecordUpdate builder.
func (dru *DeathRecordUpdate) Where(ps ...predicate.DeathRecord) *DeathRecordUpdate {
	dru.mutation.predicates = append(dru.mutation.predicates, ps...)
	return dru
}

// SetReportedDate sets the "reportedDate" field.
func (dru *DeathRecordUpdate) SetReportedDate(t time.Time) *DeathRecordUpdate {
	dru.mutation.SetReportedDate(t)
	return dru
}

// SetCollectedDate sets the "collectedDate" field.
func (dru *DeathRecordUpdate) SetCollectedDate(t time.Time) *DeathRecordUpdate {
	dru.mutation.SetCollectedDate(t)
	return dru
}

// SetSinadefRegisters sets the "sinadefRegisters" field.
func (dru *DeathRecordUpdate) SetSinadefRegisters(i int) *DeathRecordUpdate {
	dru.mutation.ResetSinadefRegisters()
	dru.mutation.SetSinadefRegisters(i)
	return dru
}

// AddSinadefRegisters adds i to the "sinadefRegisters" field.
func (dru *DeathRecordUpdate) AddSinadefRegisters(i int) *DeathRecordUpdate {
	dru.mutation.AddSinadefRegisters(i)
	return dru
}

// SetMinsaRegisters sets the "minsaRegisters" field.
func (dru *DeathRecordUpdate) SetMinsaRegisters(i int) *DeathRecordUpdate {
	dru.mutation.ResetMinsaRegisters()
	dru.mutation.SetMinsaRegisters(i)
	return dru
}

// AddMinsaRegisters adds i to the "minsaRegisters" field.
func (dru *DeathRecordUpdate) AddMinsaRegisters(i int) *DeathRecordUpdate {
	dru.mutation.AddMinsaRegisters(i)
	return dru
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (dru *DeathRecordUpdate) AddPlaceIDs(ids ...int) *DeathRecordUpdate {
	dru.mutation.AddPlaceIDs(ids...)
	return dru
}

// AddPlaces adds the "places" edges to the Place entity.
func (dru *DeathRecordUpdate) AddPlaces(p ...*Place) *DeathRecordUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dru.AddPlaceIDs(ids...)
}

// Mutation returns the DeathRecordMutation object of the builder.
func (dru *DeathRecordUpdate) Mutation() *DeathRecordMutation {
	return dru.mutation
}

// ClearPlaces clears all "places" edges to the Place entity.
func (dru *DeathRecordUpdate) ClearPlaces() *DeathRecordUpdate {
	dru.mutation.ClearPlaces()
	return dru
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (dru *DeathRecordUpdate) RemovePlaceIDs(ids ...int) *DeathRecordUpdate {
	dru.mutation.RemovePlaceIDs(ids...)
	return dru
}

// RemovePlaces removes "places" edges to Place entities.
func (dru *DeathRecordUpdate) RemovePlaces(p ...*Place) *DeathRecordUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dru.RemovePlaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DeathRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DeathRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DeathRecordUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DeathRecordUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DeathRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathrecord.Table,
			Columns: deathrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathrecord.FieldID,
			},
		},
	}
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.ReportedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathrecord.FieldReportedDate,
		})
	}
	if value, ok := dru.mutation.CollectedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathrecord.FieldCollectedDate,
		})
	}
	if value, ok := dru.mutation.SinadefRegisters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldSinadefRegisters,
		})
	}
	if value, ok := dru.mutation.AddedSinadefRegisters(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldSinadefRegisters,
		})
	}
	if value, ok := dru.mutation.MinsaRegisters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldMinsaRegisters,
		})
	}
	if value, ok := dru.mutation.AddedMinsaRegisters(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldMinsaRegisters,
		})
	}
	if dru.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deathrecord.PlacesTable,
			Columns: deathrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !dru.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deathrecord.PlacesTable,
			Columns: deathrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deathrecord.PlacesTable,
			Columns: deathrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DeathRecordUpdateOne is the builder for updating a single DeathRecord entity.
type DeathRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *DeathRecordMutation
}

// SetReportedDate sets the "reportedDate" field.
func (druo *DeathRecordUpdateOne) SetReportedDate(t time.Time) *DeathRecordUpdateOne {
	druo.mutation.SetReportedDate(t)
	return druo
}

// SetCollectedDate sets the "collectedDate" field.
func (druo *DeathRecordUpdateOne) SetCollectedDate(t time.Time) *DeathRecordUpdateOne {
	druo.mutation.SetCollectedDate(t)
	return druo
}

// SetSinadefRegisters sets the "sinadefRegisters" field.
func (druo *DeathRecordUpdateOne) SetSinadefRegisters(i int) *DeathRecordUpdateOne {
	druo.mutation.ResetSinadefRegisters()
	druo.mutation.SetSinadefRegisters(i)
	return druo
}

// AddSinadefRegisters adds i to the "sinadefRegisters" field.
func (druo *DeathRecordUpdateOne) AddSinadefRegisters(i int) *DeathRecordUpdateOne {
	druo.mutation.AddSinadefRegisters(i)
	return druo
}

// SetMinsaRegisters sets the "minsaRegisters" field.
func (druo *DeathRecordUpdateOne) SetMinsaRegisters(i int) *DeathRecordUpdateOne {
	druo.mutation.ResetMinsaRegisters()
	druo.mutation.SetMinsaRegisters(i)
	return druo
}

// AddMinsaRegisters adds i to the "minsaRegisters" field.
func (druo *DeathRecordUpdateOne) AddMinsaRegisters(i int) *DeathRecordUpdateOne {
	druo.mutation.AddMinsaRegisters(i)
	return druo
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (druo *DeathRecordUpdateOne) AddPlaceIDs(ids ...int) *DeathRecordUpdateOne {
	druo.mutation.AddPlaceIDs(ids...)
	return druo
}

// AddPlaces adds the "places" edges to the Place entity.
func (druo *DeathRecordUpdateOne) AddPlaces(p ...*Place) *DeathRecordUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return druo.AddPlaceIDs(ids...)
}

// Mutation returns the DeathRecordMutation object of the builder.
func (druo *DeathRecordUpdateOne) Mutation() *DeathRecordMutation {
	return druo.mutation
}

// ClearPlaces clears all "places" edges to the Place entity.
func (druo *DeathRecordUpdateOne) ClearPlaces() *DeathRecordUpdateOne {
	druo.mutation.ClearPlaces()
	return druo
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (druo *DeathRecordUpdateOne) RemovePlaceIDs(ids ...int) *DeathRecordUpdateOne {
	druo.mutation.RemovePlaceIDs(ids...)
	return druo
}

// RemovePlaces removes "places" edges to Place entities.
func (druo *DeathRecordUpdateOne) RemovePlaces(p ...*Place) *DeathRecordUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return druo.RemovePlaceIDs(ids...)
}

// Save executes the query and returns the updated DeathRecord entity.
func (druo *DeathRecordUpdateOne) Save(ctx context.Context) (*DeathRecord, error) {
	var (
		err  error
		node *DeathRecord
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DeathRecordUpdateOne) SaveX(ctx context.Context) *DeathRecord {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DeathRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DeathRecordUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DeathRecordUpdateOne) sqlSave(ctx context.Context) (_node *DeathRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathrecord.Table,
			Columns: deathrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathrecord.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeathRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.ReportedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathrecord.FieldReportedDate,
		})
	}
	if value, ok := druo.mutation.CollectedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathrecord.FieldCollectedDate,
		})
	}
	if value, ok := druo.mutation.SinadefRegisters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldSinadefRegisters,
		})
	}
	if value, ok := druo.mutation.AddedSinadefRegisters(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldSinadefRegisters,
		})
	}
	if value, ok := druo.mutation.MinsaRegisters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldMinsaRegisters,
		})
	}
	if value, ok := druo.mutation.AddedMinsaRegisters(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathrecord.FieldMinsaRegisters,
		})
	}
	if druo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deathrecord.PlacesTable,
			Columns: deathrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !druo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deathrecord.PlacesTable,
			Columns: deathrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deathrecord.PlacesTable,
			Columns: deathrecord.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeathRecord{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
