// Code generated by entc, DO NOT EDIT.

package bedrecord

import (
	"opencensus/core/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ReportedDate applies equality check predicate on the "reportedDate" field. It's identical to ReportedDateEQ.
func ReportedDate(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportedDate), v))
	})
}

// CollectedDate applies equality check predicate on the "collectedDate" field. It's identical to CollectedDateEQ.
func CollectedDate(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedDate), v))
	})
}

// BusyBeds applies equality check predicate on the "busyBeds" field. It's identical to BusyBedsEQ.
func BusyBeds(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusyBeds), v))
	})
}

// AvailableBeds applies equality check predicate on the "availableBeds" field. It's identical to AvailableBedsEQ.
func AvailableBeds(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableBeds), v))
	})
}

// TotalBeds applies equality check predicate on the "totalBeds" field. It's identical to TotalBedsEQ.
func TotalBeds(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalBeds), v))
	})
}

// KindBed applies equality check predicate on the "kindBed" field. It's identical to KindBedEQ.
func KindBed(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKindBed), v))
	})
}

// KindAge applies equality check predicate on the "kindAge" field. It's identical to KindAgeEQ.
func KindAge(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKindAge), v))
	})
}

// ReportedDateEQ applies the EQ predicate on the "reportedDate" field.
func ReportedDateEQ(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportedDate), v))
	})
}

// ReportedDateNEQ applies the NEQ predicate on the "reportedDate" field.
func ReportedDateNEQ(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportedDate), v))
	})
}

// ReportedDateIn applies the In predicate on the "reportedDate" field.
func ReportedDateIn(vs ...time.Time) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportedDate), v...))
	})
}

// ReportedDateNotIn applies the NotIn predicate on the "reportedDate" field.
func ReportedDateNotIn(vs ...time.Time) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportedDate), v...))
	})
}

// ReportedDateGT applies the GT predicate on the "reportedDate" field.
func ReportedDateGT(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportedDate), v))
	})
}

// ReportedDateGTE applies the GTE predicate on the "reportedDate" field.
func ReportedDateGTE(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportedDate), v))
	})
}

// ReportedDateLT applies the LT predicate on the "reportedDate" field.
func ReportedDateLT(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportedDate), v))
	})
}

// ReportedDateLTE applies the LTE predicate on the "reportedDate" field.
func ReportedDateLTE(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportedDate), v))
	})
}

// CollectedDateEQ applies the EQ predicate on the "collectedDate" field.
func CollectedDateEQ(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateNEQ applies the NEQ predicate on the "collectedDate" field.
func CollectedDateNEQ(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateIn applies the In predicate on the "collectedDate" field.
func CollectedDateIn(vs ...time.Time) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectedDate), v...))
	})
}

// CollectedDateNotIn applies the NotIn predicate on the "collectedDate" field.
func CollectedDateNotIn(vs ...time.Time) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectedDate), v...))
	})
}

// CollectedDateGT applies the GT predicate on the "collectedDate" field.
func CollectedDateGT(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateGTE applies the GTE predicate on the "collectedDate" field.
func CollectedDateGTE(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateLT applies the LT predicate on the "collectedDate" field.
func CollectedDateLT(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectedDate), v))
	})
}

// CollectedDateLTE applies the LTE predicate on the "collectedDate" field.
func CollectedDateLTE(v time.Time) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectedDate), v))
	})
}

// BusyBedsEQ applies the EQ predicate on the "busyBeds" field.
func BusyBedsEQ(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusyBeds), v))
	})
}

// BusyBedsNEQ applies the NEQ predicate on the "busyBeds" field.
func BusyBedsNEQ(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusyBeds), v))
	})
}

// BusyBedsIn applies the In predicate on the "busyBeds" field.
func BusyBedsIn(vs ...int) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusyBeds), v...))
	})
}

// BusyBedsNotIn applies the NotIn predicate on the "busyBeds" field.
func BusyBedsNotIn(vs ...int) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusyBeds), v...))
	})
}

// BusyBedsGT applies the GT predicate on the "busyBeds" field.
func BusyBedsGT(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusyBeds), v))
	})
}

// BusyBedsGTE applies the GTE predicate on the "busyBeds" field.
func BusyBedsGTE(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusyBeds), v))
	})
}

// BusyBedsLT applies the LT predicate on the "busyBeds" field.
func BusyBedsLT(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusyBeds), v))
	})
}

// BusyBedsLTE applies the LTE predicate on the "busyBeds" field.
func BusyBedsLTE(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusyBeds), v))
	})
}

// AvailableBedsEQ applies the EQ predicate on the "availableBeds" field.
func AvailableBedsEQ(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableBeds), v))
	})
}

// AvailableBedsNEQ applies the NEQ predicate on the "availableBeds" field.
func AvailableBedsNEQ(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailableBeds), v))
	})
}

// AvailableBedsIn applies the In predicate on the "availableBeds" field.
func AvailableBedsIn(vs ...int) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvailableBeds), v...))
	})
}

// AvailableBedsNotIn applies the NotIn predicate on the "availableBeds" field.
func AvailableBedsNotIn(vs ...int) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvailableBeds), v...))
	})
}

// AvailableBedsGT applies the GT predicate on the "availableBeds" field.
func AvailableBedsGT(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailableBeds), v))
	})
}

// AvailableBedsGTE applies the GTE predicate on the "availableBeds" field.
func AvailableBedsGTE(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailableBeds), v))
	})
}

// AvailableBedsLT applies the LT predicate on the "availableBeds" field.
func AvailableBedsLT(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailableBeds), v))
	})
}

// AvailableBedsLTE applies the LTE predicate on the "availableBeds" field.
func AvailableBedsLTE(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailableBeds), v))
	})
}

// TotalBedsEQ applies the EQ predicate on the "totalBeds" field.
func TotalBedsEQ(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalBeds), v))
	})
}

// TotalBedsNEQ applies the NEQ predicate on the "totalBeds" field.
func TotalBedsNEQ(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalBeds), v))
	})
}

// TotalBedsIn applies the In predicate on the "totalBeds" field.
func TotalBedsIn(vs ...int) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalBeds), v...))
	})
}

// TotalBedsNotIn applies the NotIn predicate on the "totalBeds" field.
func TotalBedsNotIn(vs ...int) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalBeds), v...))
	})
}

// TotalBedsGT applies the GT predicate on the "totalBeds" field.
func TotalBedsGT(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalBeds), v))
	})
}

// TotalBedsGTE applies the GTE predicate on the "totalBeds" field.
func TotalBedsGTE(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalBeds), v))
	})
}

// TotalBedsLT applies the LT predicate on the "totalBeds" field.
func TotalBedsLT(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalBeds), v))
	})
}

// TotalBedsLTE applies the LTE predicate on the "totalBeds" field.
func TotalBedsLTE(v int) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalBeds), v))
	})
}

// KindBedEQ applies the EQ predicate on the "kindBed" field.
func KindBedEQ(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKindBed), v))
	})
}

// KindBedNEQ applies the NEQ predicate on the "kindBed" field.
func KindBedNEQ(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKindBed), v))
	})
}

// KindBedIn applies the In predicate on the "kindBed" field.
func KindBedIn(vs ...string) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKindBed), v...))
	})
}

// KindBedNotIn applies the NotIn predicate on the "kindBed" field.
func KindBedNotIn(vs ...string) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKindBed), v...))
	})
}

// KindBedGT applies the GT predicate on the "kindBed" field.
func KindBedGT(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKindBed), v))
	})
}

// KindBedGTE applies the GTE predicate on the "kindBed" field.
func KindBedGTE(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKindBed), v))
	})
}

// KindBedLT applies the LT predicate on the "kindBed" field.
func KindBedLT(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKindBed), v))
	})
}

// KindBedLTE applies the LTE predicate on the "kindBed" field.
func KindBedLTE(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKindBed), v))
	})
}

// KindBedContains applies the Contains predicate on the "kindBed" field.
func KindBedContains(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKindBed), v))
	})
}

// KindBedHasPrefix applies the HasPrefix predicate on the "kindBed" field.
func KindBedHasPrefix(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKindBed), v))
	})
}

// KindBedHasSuffix applies the HasSuffix predicate on the "kindBed" field.
func KindBedHasSuffix(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKindBed), v))
	})
}

// KindBedEqualFold applies the EqualFold predicate on the "kindBed" field.
func KindBedEqualFold(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKindBed), v))
	})
}

// KindBedContainsFold applies the ContainsFold predicate on the "kindBed" field.
func KindBedContainsFold(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKindBed), v))
	})
}

// KindAgeEQ applies the EQ predicate on the "kindAge" field.
func KindAgeEQ(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKindAge), v))
	})
}

// KindAgeNEQ applies the NEQ predicate on the "kindAge" field.
func KindAgeNEQ(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKindAge), v))
	})
}

// KindAgeIn applies the In predicate on the "kindAge" field.
func KindAgeIn(vs ...string) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKindAge), v...))
	})
}

// KindAgeNotIn applies the NotIn predicate on the "kindAge" field.
func KindAgeNotIn(vs ...string) predicate.BedRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BedRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKindAge), v...))
	})
}

// KindAgeGT applies the GT predicate on the "kindAge" field.
func KindAgeGT(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKindAge), v))
	})
}

// KindAgeGTE applies the GTE predicate on the "kindAge" field.
func KindAgeGTE(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKindAge), v))
	})
}

// KindAgeLT applies the LT predicate on the "kindAge" field.
func KindAgeLT(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKindAge), v))
	})
}

// KindAgeLTE applies the LTE predicate on the "kindAge" field.
func KindAgeLTE(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKindAge), v))
	})
}

// KindAgeContains applies the Contains predicate on the "kindAge" field.
func KindAgeContains(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKindAge), v))
	})
}

// KindAgeHasPrefix applies the HasPrefix predicate on the "kindAge" field.
func KindAgeHasPrefix(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKindAge), v))
	})
}

// KindAgeHasSuffix applies the HasSuffix predicate on the "kindAge" field.
func KindAgeHasSuffix(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKindAge), v))
	})
}

// KindAgeEqualFold applies the EqualFold predicate on the "kindAge" field.
func KindAgeEqualFold(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKindAge), v))
	})
}

// KindAgeContainsFold applies the ContainsFold predicate on the "kindAge" field.
func KindAgeContainsFold(v string) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKindAge), v))
	})
}

// HasPlaces applies the HasEdge predicate on the "places" edge.
func HasPlaces() predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlacesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PlacesTable, PlacesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacesWith applies the HasEdge predicate on the "places" edge with a given conditions (other predicates).
func HasPlacesWith(preds ...predicate.Place) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlacesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PlacesTable, PlacesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BedRecord) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BedRecord) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BedRecord) predicate.BedRecord {
	return predicate.BedRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
