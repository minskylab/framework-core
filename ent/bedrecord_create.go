// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opencensus/core/ent/bedrecord"
	"opencensus/core/ent/organization"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BedRecordCreate is the builder for creating a BedRecord entity.
type BedRecordCreate struct {
	config
	mutation *BedRecordMutation
	hooks    []Hook
}

// SetBusyCovidBeds sets the "busyCovidBeds" field.
func (brc *BedRecordCreate) SetBusyCovidBeds(i int) *BedRecordCreate {
	brc.mutation.SetBusyCovidBeds(i)
	return brc
}

// SetAvailableCovidBeds sets the "availableCovidBeds" field.
func (brc *BedRecordCreate) SetAvailableCovidBeds(i int) *BedRecordCreate {
	brc.mutation.SetAvailableCovidBeds(i)
	return brc
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (brc *BedRecordCreate) AddOrganizationIDs(ids ...int) *BedRecordCreate {
	brc.mutation.AddOrganizationIDs(ids...)
	return brc
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (brc *BedRecordCreate) AddOrganization(o ...*Organization) *BedRecordCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return brc.AddOrganizationIDs(ids...)
}

// Mutation returns the BedRecordMutation object of the builder.
func (brc *BedRecordCreate) Mutation() *BedRecordMutation {
	return brc.mutation
}

// Save creates the BedRecord in the database.
func (brc *BedRecordCreate) Save(ctx context.Context) (*BedRecord, error) {
	var (
		err  error
		node *BedRecord
	)
	if len(brc.hooks) == 0 {
		if err = brc.check(); err != nil {
			return nil, err
		}
		node, err = brc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = brc.check(); err != nil {
				return nil, err
			}
			brc.mutation = mutation
			node, err = brc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(brc.hooks) - 1; i >= 0; i-- {
			mut = brc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, brc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BedRecordCreate) SaveX(ctx context.Context) *BedRecord {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (brc *BedRecordCreate) check() error {
	if _, ok := brc.mutation.BusyCovidBeds(); !ok {
		return &ValidationError{Name: "busyCovidBeds", err: errors.New("ent: missing required field \"busyCovidBeds\"")}
	}
	if _, ok := brc.mutation.AvailableCovidBeds(); !ok {
		return &ValidationError{Name: "availableCovidBeds", err: errors.New("ent: missing required field \"availableCovidBeds\"")}
	}
	return nil
}

func (brc *BedRecordCreate) sqlSave(ctx context.Context) (*BedRecord, error) {
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (brc *BedRecordCreate) createSpec() (*BedRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &BedRecord{config: brc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bedrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bedrecord.FieldID,
			},
		}
	)
	if value, ok := brc.mutation.BusyCovidBeds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bedrecord.FieldBusyCovidBeds,
		})
		_node.BusyCovidBeds = value
	}
	if value, ok := brc.mutation.AvailableCovidBeds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bedrecord.FieldAvailableCovidBeds,
		})
		_node.AvailableCovidBeds = value
	}
	if nodes := brc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bedrecord.OrganizationTable,
			Columns: bedrecord.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BedRecordCreateBulk is the builder for creating many BedRecord entities in bulk.
type BedRecordCreateBulk struct {
	config
	builders []*BedRecordCreate
}

// Save creates the BedRecord entities in the database.
func (brcb *BedRecordCreateBulk) Save(ctx context.Context) ([]*BedRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BedRecord, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BedRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BedRecordCreateBulk) SaveX(ctx context.Context) []*BedRecord {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
