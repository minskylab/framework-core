// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/infectedrecord"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// InfectedRecord is the model entity for the InfectedRecord schema.
type InfectedRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReportedDate holds the value of the "reportedDate" field.
	ReportedDate time.Time `json:"reportedDate,omitempty"`
	// CollectedDate holds the value of the "collectedDate" field.
	CollectedDate time.Time `json:"collectedDate,omitempty"`
	// PcrTotalTests holds the value of the "pcrTotalTests" field.
	PcrTotalTests int `json:"pcrTotalTests,omitempty"`
	// PrTotalTests holds the value of the "prTotalTests" field.
	PrTotalTests int `json:"prTotalTests,omitempty"`
	// AgTotalTests holds the value of the "agTotalTests" field.
	AgTotalTests int `json:"agTotalTests,omitempty"`
	// PcrPositiveTests holds the value of the "pcrPositiveTests" field.
	PcrPositiveTests int `json:"pcrPositiveTests,omitempty"`
	// PrPositiveTests holds the value of the "prPositiveTests" field.
	PrPositiveTests int `json:"prPositiveTests,omitempty"`
	// AgPositiveTests holds the value of the "agPositiveTests" field.
	AgPositiveTests int `json:"agPositiveTests,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InfectedRecordQuery when eager-loading is set.
	Edges InfectedRecordEdges `json:"edges"`
}

// InfectedRecordEdges holds the relations/edges for other nodes in the graph.
type InfectedRecordEdges struct {
	// Places holds the value of the places edge.
	Places []*Place `json:"places,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlacesOrErr returns the Places value or an error if the edge
// was not loaded in eager-loading.
func (e InfectedRecordEdges) PlacesOrErr() ([]*Place, error) {
	if e.loadedTypes[0] {
		return e.Places, nil
	}
	return nil, &NotLoadedError{edge: "places"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InfectedRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case infectedrecord.FieldID, infectedrecord.FieldPcrTotalTests, infectedrecord.FieldPrTotalTests, infectedrecord.FieldAgTotalTests, infectedrecord.FieldPcrPositiveTests, infectedrecord.FieldPrPositiveTests, infectedrecord.FieldAgPositiveTests:
			values[i] = &sql.NullInt64{}
		case infectedrecord.FieldReportedDate, infectedrecord.FieldCollectedDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type InfectedRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InfectedRecord fields.
func (ir *InfectedRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case infectedrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ir.ID = int(value.Int64)
		case infectedrecord.FieldReportedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reportedDate", values[i])
			} else if value.Valid {
				ir.ReportedDate = value.Time
			}
		case infectedrecord.FieldCollectedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field collectedDate", values[i])
			} else if value.Valid {
				ir.CollectedDate = value.Time
			}
		case infectedrecord.FieldPcrTotalTests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pcrTotalTests", values[i])
			} else if value.Valid {
				ir.PcrTotalTests = int(value.Int64)
			}
		case infectedrecord.FieldPrTotalTests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prTotalTests", values[i])
			} else if value.Valid {
				ir.PrTotalTests = int(value.Int64)
			}
		case infectedrecord.FieldAgTotalTests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agTotalTests", values[i])
			} else if value.Valid {
				ir.AgTotalTests = int(value.Int64)
			}
		case infectedrecord.FieldPcrPositiveTests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pcrPositiveTests", values[i])
			} else if value.Valid {
				ir.PcrPositiveTests = int(value.Int64)
			}
		case infectedrecord.FieldPrPositiveTests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prPositiveTests", values[i])
			} else if value.Valid {
				ir.PrPositiveTests = int(value.Int64)
			}
		case infectedrecord.FieldAgPositiveTests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agPositiveTests", values[i])
			} else if value.Valid {
				ir.AgPositiveTests = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPlaces queries the "places" edge of the InfectedRecord entity.
func (ir *InfectedRecord) QueryPlaces() *PlaceQuery {
	return (&InfectedRecordClient{config: ir.config}).QueryPlaces(ir)
}

// Update returns a builder for updating this InfectedRecord.
// Note that you need to call InfectedRecord.Unwrap() before calling this method if this InfectedRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *InfectedRecord) Update() *InfectedRecordUpdateOne {
	return (&InfectedRecordClient{config: ir.config}).UpdateOne(ir)
}

// Unwrap unwraps the InfectedRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ir *InfectedRecord) Unwrap() *InfectedRecord {
	tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("ent: InfectedRecord is not a transactional entity")
	}
	ir.config.driver = tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *InfectedRecord) String() string {
	var builder strings.Builder
	builder.WriteString("InfectedRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", ir.ID))
	builder.WriteString(", reportedDate=")
	builder.WriteString(ir.ReportedDate.Format(time.ANSIC))
	builder.WriteString(", collectedDate=")
	builder.WriteString(ir.CollectedDate.Format(time.ANSIC))
	builder.WriteString(", pcrTotalTests=")
	builder.WriteString(fmt.Sprintf("%v", ir.PcrTotalTests))
	builder.WriteString(", prTotalTests=")
	builder.WriteString(fmt.Sprintf("%v", ir.PrTotalTests))
	builder.WriteString(", agTotalTests=")
	builder.WriteString(fmt.Sprintf("%v", ir.AgTotalTests))
	builder.WriteString(", pcrPositiveTests=")
	builder.WriteString(fmt.Sprintf("%v", ir.PcrPositiveTests))
	builder.WriteString(", prPositiveTests=")
	builder.WriteString(fmt.Sprintf("%v", ir.PrPositiveTests))
	builder.WriteString(", agPositiveTests=")
	builder.WriteString(fmt.Sprintf("%v", ir.AgPositiveTests))
	builder.WriteByte(')')
	return builder.String()
}

// InfectedRecords is a parsable slice of InfectedRecord.
type InfectedRecords []*InfectedRecord

func (ir InfectedRecords) config(cfg config) {
	for _i := range ir {
		ir[_i].config = cfg
	}
}
