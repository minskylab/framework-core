// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"opencensus/core/ent/province"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Province is the model entity for the Province schema.
type Province struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvinceQuery when eager-loading is set.
	Edges ProvinceEdges `json:"edges"`
}

// ProvinceEdges holds the relations/edges for other nodes in the graph.
type ProvinceEdges struct {
	// Organization holds the value of the organization edge.
	Organization []*Organization `json:"organization,omitempty"`
	// Region holds the value of the region edge.
	Region []*Region `json:"region,omitempty"`
	// District holds the value of the district edge.
	District []*District `json:"district,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) OrganizationOrErr() ([]*Organization, error) {
	if e.loadedTypes[0] {
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) RegionOrErr() ([]*Region, error) {
	if e.loadedTypes[1] {
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) DistrictOrErr() ([]*District, error) {
	if e.loadedTypes[2] {
		return e.District, nil
	}
	return nil, &NotLoadedError{edge: "district"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Province) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case province.FieldID:
			values[i] = &sql.NullInt64{}
		case province.FieldName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Province", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Province fields.
func (pr *Province) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case province.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case province.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		}
	}
	return nil
}

// QueryOrganization queries the "organization" edge of the Province entity.
func (pr *Province) QueryOrganization() *OrganizationQuery {
	return (&ProvinceClient{config: pr.config}).QueryOrganization(pr)
}

// QueryRegion queries the "region" edge of the Province entity.
func (pr *Province) QueryRegion() *RegionQuery {
	return (&ProvinceClient{config: pr.config}).QueryRegion(pr)
}

// QueryDistrict queries the "district" edge of the Province entity.
func (pr *Province) QueryDistrict() *DistrictQuery {
	return (&ProvinceClient{config: pr.config}).QueryDistrict(pr)
}

// Update returns a builder for updating this Province.
// Note that you need to call Province.Unwrap() before calling this method if this Province
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Province) Update() *ProvinceUpdateOne {
	return (&ProvinceClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Province entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Province) Unwrap() *Province {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Province is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Province) String() string {
	var builder strings.Builder
	builder.WriteString("Province(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Provinces is a parsable slice of Province.
type Provinces []*Province

func (pr Provinces) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
